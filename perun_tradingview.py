#!/usr/bin/env python3
"""
Perun Trading System - Verze s TradingView API
Specializovan√° verze pro obchodov√°n√≠ s kryptomƒõnami 24/7 vyu≈æ√≠vaj√≠c√≠ technick√© indik√°tory z TradingView.
"""

import sys
import time
import random
import requests
import socket
import traceback
from datetime import datetime
from tradingview_ta import TA_Handler, Interval

# API kl√≠ƒçe
ALPACA_API_KEY = "AKJYB42QYBVD1EKBDQJ8"
ALPACA_API_SECRET = "SczRiShhbzjejIYP8KKcg50XIhJMIyR895vi1hGI"
ALPACA_BASE_URL = "https://api.alpaca.markets/v2"

# Hlaviƒçky pro Alpaca API po≈æadavky
ALPACA_HEADERS = {
    "APCA-API-KEY-ID": ALPACA_API_KEY,
    "APCA-API-SECRET-KEY": ALPACA_API_SECRET,
    "Content-Type": "application/json"
}

# Kryptomƒõny pro obchodov√°n√≠
CRYPTO_SYMBOLS = ["BTCUSD"]  # Obchodujeme BTC/USD

# Nastaven√≠ rizika
MAX_POSITION_SIZE = 25  # Maxim√°ln√≠ velikost pozice v USD
MAX_TOTAL_POSITIONS = 2  # Maxim√°ln√≠ poƒçet souƒçasn√Ωch pozic
RISK_LIMIT_PERCENT = 0.02  # Maxim√°ln√≠ riziko na obchod (2% portfolia)

# Nastaven√≠ obchodn√≠ strategie
STRATEGY_NAME = "TradingView Strategy"
STRATEGY_DESCRIPTION = "Strategie vyu≈æ√≠vaj√≠c√≠ technick√© indik√°tory z TradingView pro generov√°n√≠ obchodn√≠ch sign√°l≈Ø."

# Funkce pro pr√°ci s Alpaca API
def is_internet_available():
    """Zkontroluje, zda je dostupn√© p≈ôipojen√≠ k internetu."""
    try:
        # Zkus√≠me se p≈ôipojit ke Google DNS serveru
        socket.create_connection(("8.8.8.8", 53), timeout=1)
        return True
    except OSError:
        # Zkus√≠me se p≈ôipojit k Cloudflare DNS serveru jako z√°lohu
        try:
            socket.create_connection(("1.1.1.1", 53), timeout=1)
            return True
        except OSError:
            # Pokud oba selh√°vaj√≠, vr√°t√≠me False a pou≈æijeme simulaƒçn√≠ re≈æim
            return False

def get_account():
    """Z√≠sk√° informace o √∫ƒçtu."""
    # Kontrola p≈ôipojen√≠ k internetu
    if not is_internet_available():
        print("‚ö†Ô∏è Nen√≠ dostupn√© p≈ôipojen√≠ k internetu. Pou≈æ√≠v√°m simulovan√° data.")
        # Vr√°t√≠me simulovan√© informace o √∫ƒçtu
        return {
            "id": "simulovany-ucet",
            "status": "ACTIVE",
            "cash": "100000.00",
            "portfolio_value": "100000.00"
        }

    try:
        response = requests.get(f"{ALPACA_BASE_URL}/account", headers=ALPACA_HEADERS, timeout=10)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ informac√≠ o √∫ƒçtu: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            # Vr√°t√≠me simulovan√© informace o √∫ƒçtu
            return {
                "id": "simulovany-ucet",
                "status": "ACTIVE",
                "cash": "100000.00",
                "portfolio_value": "100000.00"
            }
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ informac√≠ o √∫ƒçtu: {e}")
        # Vr√°t√≠me simulovan√© informace o √∫ƒçtu
        return {
            "id": "simulovany-ucet",
            "status": "ACTIVE",
            "cash": "100000.00",
            "portfolio_value": "100000.00"
        }

def get_positions():
    """Z√≠sk√° aktu√°ln√≠ pozice."""
    # Kontrola p≈ôipojen√≠ k internetu
    if not is_internet_available():
        print("‚ö†Ô∏è Nen√≠ dostupn√© p≈ôipojen√≠ k internetu. Pou≈æ√≠v√°m simulovan√° data.")
        # Vr√°t√≠me pr√°zdn√Ω seznam pozic v simulaƒçn√≠m re≈æimu
        return []

    try:
        response = requests.get(f"{ALPACA_BASE_URL}/positions", headers=ALPACA_HEADERS, timeout=10)
        if response.status_code == 200:
            positions = response.json()
            # Filtrujeme pouze kryptomƒõnov√© pozice
            crypto_positions = [p for p in positions if p.get("symbol") in CRYPTO_SYMBOLS]
            return crypto_positions
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ pozic: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return []
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ pozic: {e}")
        return []

def get_orders():
    """Z√≠sk√° aktu√°ln√≠ objedn√°vky."""
    # Kontrola p≈ôipojen√≠ k internetu
    if not is_internet_available():
        print("‚ö†Ô∏è Nen√≠ dostupn√© p≈ôipojen√≠ k internetu. Pou≈æ√≠v√°m simulovan√° data.")
        # Vr√°t√≠me pr√°zdn√Ω seznam objedn√°vek v simulaƒçn√≠m re≈æimu
        return []

    try:
        response = requests.get(f"{ALPACA_BASE_URL}/orders", headers=ALPACA_HEADERS, timeout=10)
        if response.status_code == 200:
            orders = response.json()
            # Filtrujeme pouze kryptomƒõnov√© objedn√°vky
            crypto_orders = [o for o in orders if o.get("symbol") in CRYPTO_SYMBOLS]
            return crypto_orders
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ objedn√°vek: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return []
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ objedn√°vek: {e}")
        return []

def place_crypto_order(symbol, qty, side, order_type="market", time_in_force="gtc"):
    """Zad√° objedn√°vku na kryptomƒõnu."""
    # Kontrola p≈ôipojen√≠ k internetu
    if not is_internet_available():
        print("‚ö†Ô∏è Nen√≠ dostupn√© p≈ôipojen√≠ k internetu. Pou≈æ√≠v√°m simulovan√° data.")
        # Vr√°t√≠me simulovanou odpovƒõƒè
        return {
            "id": f"simulovana-objednavka-{random.randint(10000, 99999)}",
            "symbol": symbol,
            "side": side,
            "qty": str(qty),
            "type": order_type,
            "status": "filled"
        }

    try:
        data = {
            "symbol": symbol,
            "qty": str(qty),  # Alpaca vy≈æaduje qty jako string pro kryptomƒõny
            "side": side,
            "type": order_type,
            "time_in_force": time_in_force
        }
        response = requests.post(f"{ALPACA_BASE_URL}/orders", headers=ALPACA_HEADERS, json=data, timeout=10)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå Chyba p≈ôi zad√°v√°n√≠ objedn√°vky: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            # Vr√°t√≠me simulovanou odpovƒõƒè
            return {
                "id": f"simulovana-objednavka-{random.randint(10000, 99999)}",
                "symbol": symbol,
                "side": side,
                "qty": str(qty),
                "type": order_type,
                "status": "filled"
            }
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi zad√°v√°n√≠ objedn√°vky: {e}")
        # Vr√°t√≠me simulovanou odpovƒõƒè
        return {
            "id": f"simulovana-objednavka-{random.randint(10000, 99999)}",
            "symbol": symbol,
            "side": side,
            "qty": str(qty),
            "type": order_type,
            "status": "filled"
        }

def cancel_order(order_id):
    """Zru≈°√≠ objedn√°vku."""
    # Kontrola p≈ôipojen√≠ k internetu
    if not is_internet_available():
        print("‚ö†Ô∏è Nen√≠ dostupn√© p≈ôipojen√≠ k internetu. Pou≈æ√≠v√°m simulovan√° data.")
        # Vr√°t√≠me simulovanou odpovƒõƒè
        return True

    try:
        response = requests.delete(f"{ALPACA_BASE_URL}/orders/{order_id}", headers=ALPACA_HEADERS, timeout=10)
        if response.status_code == 204:
            return True
        else:
            print(f"‚ùå Chyba p≈ôi ru≈°en√≠ objedn√°vky: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi ru≈°en√≠ objedn√°vky: {e}")
        return False

# Funkce pro pr√°ci s TradingView API
def get_tradingview_analysis(symbol):
    """Z√≠sk√° anal√Ωzu z TradingView pro dan√Ω symbol."""
    try:
        # P≈ôevod symbolu na form√°t pro TradingView (nap≈ô. BTCUSD -> BINANCE:BTCUSDT)
        if symbol == "BTCUSD":
            tv_symbol = "BTCUSDT"
            exchange = "BINANCE"
        elif symbol == "ETHUSD":
            tv_symbol = "ETHUSDT"
            exchange = "BINANCE"
        else:
            tv_symbol = symbol
            exchange = "BINANCE"

        print(f"üìä Z√≠sk√°v√°m anal√Ωzu z TradingView pro {exchange}:{tv_symbol}...")

        # Vytvo≈ôen√≠ handleru pro TradingView
        handler = TA_Handler(
            symbol=tv_symbol,
            exchange=exchange,
            screener="crypto",
            interval=Interval.INTERVAL_1_HOUR,
            timeout=10
        )

        # Z√≠sk√°n√≠ anal√Ωzy
        analysis = handler.get_analysis()

        # V√Ωpis v√Ωsledk≈Ø
        print(f"  Doporuƒçen√≠: {analysis.summary['RECOMMENDATION']}")
        print(f"  RSI: {analysis.indicators['RSI']}")
        print(f"  MACD: {analysis.indicators['MACD.macd']}")
        print(f"  MACD Signal: {analysis.indicators['MACD.signal']}")
        print(f"  Bollinger Bands (horn√≠): {analysis.indicators['BB.upper']}")
        print(f"  Bollinger Bands (doln√≠): {analysis.indicators['BB.lower']}")

        return analysis
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ anal√Ωzy z TradingView: {e}")
        return None

def get_price(symbol):
    """Z√≠sk√° aktu√°ln√≠ cenu pro dan√Ω symbol z Alpaca API."""
    # Kontrola p≈ôipojen√≠ k internetu
    if not is_internet_available():
        print("‚ö†Ô∏è Nen√≠ dostupn√© p≈ôipojen√≠ k internetu. Pou≈æ√≠v√°m simulovan√° data.")
        # Vr√°t√≠me simulovanou cenu
        base_prices = {
            "BTCUSD": 85000.0,
            "ETHUSD": 3500.0
        }
        base_price = base_prices.get(symbol, 1000.0)
        return base_price * (1 + random.uniform(-0.01, 0.01))

    try:
        # Pou≈æijeme Alpaca API m√≠sto TAAPI.IO pro z√≠sk√°n√≠ ceny
        response = requests.get(f"{ALPACA_BASE_URL}/assets/{symbol}", headers=ALPACA_HEADERS, timeout=10)
        if response.status_code == 200:
            data = response.json()
            return float(data.get("price", 0))
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ ceny z Alpaca: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")

            # Z√°lo≈æn√≠ metoda - pou≈æijeme cenu z pozice, pokud existuje
            try:
                positions = get_positions()
                for position in positions:
                    if position.get("symbol") == symbol:
                        return float(position.get("current_price", 0))
            except:
                pass

            # Pokud v≈°e selh√°lo, vr√°t√≠me simulovanou cenu
            base_prices = {
                "BTCUSD": 85000.0,
                "ETHUSD": 3500.0
            }
            base_price = base_prices.get(symbol, 1000.0)
            return base_price * (1 + random.uniform(-0.01, 0.01))
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ ceny: {e}")
        # Vr√°t√≠me simulovanou cenu
        base_prices = {
            "BTCUSD": 85000.0,
            "ETHUSD": 3500.0
        }
        base_price = base_prices.get(symbol, 1000.0)
        return base_price * (1 + random.uniform(-0.01, 0.01))

# Funkce pro anal√Ωzu a generov√°n√≠ obchodn√≠ch sign√°l≈Ø
def analyze_crypto(symbol):
    """Analyzuje kryptomƒõnu a generuje obchodn√≠ sign√°l na z√°kladƒõ TradingView anal√Ωzy."""
    print(f"üîç Analyzuji {symbol}...")

    # Z√≠sk√°n√≠ ceny z Alpaca API
    current_price = get_price(symbol)

    # Z√≠sk√°n√≠ anal√Ωzy z TradingView
    analysis = get_tradingview_analysis(symbol)

    # Kontrola, zda se poda≈ôilo z√≠skat anal√Ωzu
    if not analysis or not current_price:
        print(f"‚ùå Nepoda≈ôilo se z√≠skat anal√Ωzu nebo cenu pro {symbol}")
        return None

    # Inicializace sign√°lu a d≈Øvƒõry
    signal = None
    confidence = 0.5
    reasons = []

    # Anal√Ωza doporuƒçen√≠
    recommendation = analysis.summary['RECOMMENDATION']
    if "BUY" in recommendation or "STRONG_BUY" in recommendation:
        signal = "buy"
        confidence += 0.3
        reasons.append(f"TradingView doporuƒçuje {recommendation}")
    elif "SELL" in recommendation or "STRONG_SELL" in recommendation:
        signal = "sell"
        confidence += 0.3
        reasons.append(f"TradingView doporuƒçuje {recommendation}")

    # Anal√Ωza RSI
    rsi = analysis.indicators['RSI']
    if rsi < 30:  # P≈ôekoupeno - sign√°l k n√°kupu
        if signal != "buy":
            confidence += 0.1
        signal = "buy"
        reasons.append(f"RSI je n√≠zk√© ({rsi:.2f} < 30) - p≈ôekoupeno, sign√°l k n√°kupu")
    elif rsi > 70:  # P≈ôeprod√°no - sign√°l k prodeji
        if signal != "sell":
            confidence += 0.1
        signal = "sell"
        reasons.append(f"RSI je vysok√© ({rsi:.2f} > 70) - p≈ôeprod√°no, sign√°l k prodeji")

    # Anal√Ωza MACD
    macd = analysis.indicators['MACD.macd']
    macd_signal = analysis.indicators['MACD.signal']
    if macd > macd_signal:  # MACD nad sign√°ln√≠ lini√≠ - sign√°l k n√°kupu
        if signal != "buy":
            confidence += 0.1
        signal = "buy"
        reasons.append(f"MACD ({macd:.2f}) je nad sign√°ln√≠ lini√≠ ({macd_signal:.2f}) - sign√°l k n√°kupu")
    elif macd < macd_signal:  # MACD pod sign√°ln√≠ lini√≠ - sign√°l k prodeji
        if signal != "sell":
            confidence += 0.1
        signal = "sell"
        reasons.append(f"MACD ({macd:.2f}) je pod sign√°ln√≠ lini√≠ ({macd_signal:.2f}) - sign√°l k prodeji")

    # Anal√Ωza Bollinger Bands
    bb_upper = analysis.indicators['BB.upper']
    bb_lower = analysis.indicators['BB.lower']
    if current_price <= bb_lower:  # Cena pod doln√≠ hranic√≠ - sign√°l k n√°kupu
        if signal != "buy":
            confidence += 0.1
        signal = "buy"
        reasons.append(f"Cena ({current_price:.2f}) je pod doln√≠ hranic√≠ Bollinger Bands ({bb_lower:.2f}) - sign√°l k n√°kupu")
    elif current_price >= bb_upper:  # Cena nad horn√≠ hranic√≠ - sign√°l k prodeji
        if signal != "sell":
            confidence += 0.1
        signal = "sell"
        reasons.append(f"Cena ({current_price:.2f}) je nad horn√≠ hranic√≠ Bollinger Bands ({bb_upper:.2f}) - sign√°l k prodeji")

    # Pokud nem√°me sign√°l, vr√°t√≠me None
    if signal is None:
        print(f"‚ùå ≈Ω√°dn√Ω obchodn√≠ sign√°l pro {symbol}")
        return None

    # V√Ωpoƒçet mno≈æstv√≠ na z√°kladƒõ rizika
    account = get_account()
    if not account:
        return None

    portfolio_value = float(account.get("portfolio_value", 0))
    risk_amount = portfolio_value * RISK_LIMIT_PERCENT

    # Omezen√≠ velikosti pozice
    max_qty_by_risk = risk_amount / current_price
    max_qty_by_limit = MAX_POSITION_SIZE / current_price
    qty = min(max_qty_by_risk, max_qty_by_limit)

    # Zaokrouhlen√≠ na 8 desetinn√Ωch m√≠st (bƒõ≈æn√© pro kryptomƒõny)
    qty = round(qty, 8)

    # Minim√°ln√≠ mno≈æstv√≠ pro obchodov√°n√≠
    if qty < 0.0001:
        qty = 0.0001

    return {
        "symbol": symbol,
        "side": signal,
        "qty": qty,
        "price": current_price,
        "confidence": confidence,
        "reasons": reasons,
        "indicators": {
            "recommendation": recommendation,
            "rsi": rsi,
            "macd": macd,
            "macd_signal": macd_signal,
            "bb_upper": bb_upper,
            "bb_lower": bb_lower
        }
    }

def format_money(amount):
    """Form√°tuje ƒç√°stku jako pen√≠ze."""
    return f"${amount:.2f}"

def format_crypto(amount):
    """Form√°tuje mno≈æstv√≠ kryptomƒõny."""
    if amount < 0.001:
        return f"{amount:.8f}"
    elif amount < 1:
        return f"{amount:.6f}"
    else:
        return f"{amount:.4f}"

def log_to_file(message, log_file="trading_log.txt"):
    """Zap√≠≈°e zpr√°vu do logovac√≠ho souboru."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(log_file, "a") as f:
        f.write(f"[{timestamp}] {message}\n")

def run_crypto_trading_system():
    """Spou≈°t√≠ obchodn√≠ syst√©m pro kryptomƒõny."""
    print("=" * 50)
    print("PERUN TRADING SYSTEM - TRADINGVIEW VERZE")
    print("=" * 50)
    print("Spou≈°t√≠m obchodn√≠ syst√©m pro kryptomƒõny 24/7 s vyu≈æit√≠m TradingView.")
    print(f"Obchodovan√© symboly: {', '.join(CRYPTO_SYMBOLS)}")
    print(f"Strategie: {STRATEGY_NAME}")
    print(f"Popis: {STRATEGY_DESCRIPTION}")
    print("=" * 50)

    # Vytvo≈ôen√≠ logovac√≠ho souboru
    log_file = "trading_log.txt"
    log_to_file("=== SPU≈†TƒöN√ç OBCHODN√çHO SYST√âMU ===", log_file)

    # Z√≠sk√°n√≠ informac√≠ o √∫ƒçtu
    account = get_account()
    if not account:
        print("‚ùå Nelze z√≠skat informace o √∫ƒçtu. Ukonƒçuji.")
        return

    print(f"\nüìä Informace o √∫ƒçtu:")
    print(f"ID √∫ƒçtu: {account.get('id')}")
    print(f"Status √∫ƒçtu: {account.get('status')}")
    print(f"Hotovost: {format_money(float(account.get('cash', 0)))}")
    print(f"Hodnota portfolia: {format_money(float(account.get('portfolio_value', 0)))}")

    log_to_file(f"Poƒç√°teƒçn√≠ hodnota portfolia: {format_money(float(account.get('portfolio_value', 0)))}", log_file)

    # Hlavn√≠ smyƒçka
    try:
        cycle = 0
        while True:
            cycle += 1
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            print(f"\n{'=' * 20} CYKLUS {cycle} ({now}) {'=' * 20}")
            log_to_file(f"CYKLUS {cycle} ({now})", log_file)

            # Z√≠sk√°n√≠ aktu√°ln√≠ch pozic
            positions = get_positions()
            print(f"\nüìà Aktu√°ln√≠ krypto pozice ({len(positions)}):")
            for position in positions:
                try:
                    symbol = position.get("symbol")
                    qty = float(position.get("qty", 0))
                    avg_entry_price = float(position.get("avg_entry_price", 0))
                    current_price = float(position.get("current_price", 0))
                    market_value = qty * current_price  # Vypoƒç√≠t√°me hodnotu pozice
                    unrealized_pl = market_value - (qty * avg_entry_price)  # Vypoƒç√≠t√°me zisk/ztr√°tu
                    unrealized_plpc = (current_price / avg_entry_price - 1.0) * 100 if avg_entry_price > 0 else 0

                    position_info = f"{symbol}: {format_crypto(qty)} @ {format_money(avg_entry_price)} | Aktu√°ln√≠ cena: {format_money(current_price)} | P/L: {format_money(unrealized_pl)} ({unrealized_plpc:.2f}%)"
                    print(f"  {position_info}")
                    log_to_file(f"Pozice: {position_info}", log_file)
                except Exception as e:
                    print(f"  ‚ùå Chyba p≈ôi zpracov√°n√≠ pozice: {e}")

            # Z√≠sk√°n√≠ aktu√°ln√≠ch objedn√°vek
            orders = get_orders()
            print(f"\nüìã Aktu√°ln√≠ krypto objedn√°vky ({len(orders)}):")
            for order in orders:
                try:
                    order_id = order.get("id", "N/A")
                    symbol = order.get("symbol", "N/A")
                    side = order.get("side", "N/A")
                    qty = float(order.get("qty", 0))
                    order_type = order.get("type", "N/A")
                    status = order.get("status", "N/A")

                    order_info = f"{symbol}: {side.upper()} {format_crypto(qty)} ({order_type}) | Status: {status}"
                    print(f"  {order_info}")
                    log_to_file(f"Objedn√°vka: {order_info}", log_file)
                except Exception as e:
                    print(f"  ‚ùå Chyba p≈ôi zpracov√°n√≠ objedn√°vky: {e}")

            # Anal√Ωza a generov√°n√≠ obchodn√≠ch sign√°l≈Ø
            for symbol in CRYPTO_SYMBOLS:
                signal = analyze_crypto(symbol)
                if signal:
                    side = signal.get("side")
                    qty = signal.get("qty")
                    price = signal.get("price")
                    confidence = signal.get("confidence")
                    reasons = signal.get("reasons", [])
                    indicators = signal.get("indicators", {})

                    print(f"\nüîî Obchodn√≠ sign√°l pro {symbol}:")
                    print(f"  Akce: {side.upper()}")
                    print(f"  Mno≈æstv√≠: {format_crypto(qty)}")
                    print(f"  Cena: {format_money(price)}")
                    print(f"  D≈Øvƒõra: {confidence:.2f}")
                    print(f"  D≈Øvody:")
                    for reason in reasons:
                        print(f"    - {reason}")

                    print(f"  Indik√°tory:")
                    for indicator_name, indicator_value in indicators.items():
                        print(f"    - {indicator_name}: {indicator_value}")

                    signal_info = f"{symbol}: {side.upper()} {format_crypto(qty)} @ {format_money(price)} | D≈Øvƒõra: {confidence:.2f}"
                    log_to_file(f"Sign√°l: {signal_info}", log_file)
                    for reason in reasons:
                        log_to_file(f"  - {reason}", log_file)

                    # Proveden√≠ obchodu na z√°kladƒõ sign√°lu
                    if confidence > 0.7:  # Pouze sign√°ly s vysokou d≈Øvƒõrou
                        # Kontrola, zda ji≈æ nem√°me otev≈ôenou pozici
                        existing_position = next((p for p in positions if p.get("symbol") == symbol), None)

                        # Pokud m√°me pozici a sign√°l je stejn√Ω smƒõr, p≈ôeskoƒç√≠me
                        if existing_position:
                            position_side = "sell" if float(existing_position.get("qty", 0)) < 0 else "buy"
                            if position_side == side:
                                skip_message = f"Ji≈æ m√°me otev≈ôenou pozici {position_side.upper()} pro {symbol}, p≈ôeskakuji"
                                print(f"  ‚ö†Ô∏è {skip_message}")
                                log_to_file(f"P≈ôeskoƒçeno: {skip_message}", log_file)
                                continue

                        trade_message = f"Prov√°d√≠m obchod: {side.upper()} {format_crypto(qty)} {symbol} @ {format_money(price)}"
                        print(f"  ‚úÖ {trade_message}")
                        log_to_file(f"Obchod: {trade_message}", log_file)

                        result = place_crypto_order(symbol, qty, side)
                        if result:
                            success_message = f"Obchod zad√°n: ID objedn√°vky {result.get('id')}"
                            print(f"  ‚úÖ {success_message}")
                            log_to_file(f"√öspƒõch: {success_message}", log_file)
                        else:
                            error_message = f"Obchod se nezda≈ôil"
                            print(f"  ‚ùå {error_message}")
                            log_to_file(f"Chyba: {error_message}", log_file)
                    else:
                        low_confidence_message = f"D≈Øvƒõra sign√°lu je p≈ô√≠li≈° n√≠zk√° ({confidence:.2f}), neprov√°d√≠m obchod"
                        print(f"  ‚ö†Ô∏è {low_confidence_message}")
                        log_to_file(f"N√≠zk√° d≈Øvƒõra: {low_confidence_message}", log_file)
                else:
                    no_signal_message = f"{symbol}: ≈Ω√°dn√Ω obchodn√≠ sign√°l"
                    print(f"  {no_signal_message}")
                    log_to_file(no_signal_message, log_file)

            # ƒåek√°n√≠ na dal≈°√≠ cyklus
            wait_time = 900  # 15 minut mezi cykly
            print(f"\n‚è±Ô∏è ƒåek√°m {wait_time} sekund na dal≈°√≠ cyklus...")
            log_to_file(f"ƒåek√°n√≠ {wait_time} sekund na dal≈°√≠ cyklus", log_file)
            time.sleep(wait_time)

    except KeyboardInterrupt:
        print("\n\nüõë Obchodn√≠ syst√©m ukonƒçen u≈æivatelem")
        log_to_file("=== UKONƒåEN√ç OBCHODN√çHO SYST√âMU U≈ΩIVATELEM ===", log_file)

        # Z√≠sk√°n√≠ aktu√°ln√≠ch informac√≠ o √∫ƒçtu
        final_account = get_account()
        if final_account:
            final_value = float(final_account.get("portfolio_value", 0))
            initial_value = float(account.get("portfolio_value", 0))
            profit = final_value - initial_value
            profit_percent = (profit / initial_value) * 100 if initial_value > 0 else 0

            print(f"üí∞ Koneƒçn√° hodnota portfolia: {format_money(final_value)}")
            print(f"üìä Zisk/Ztr√°ta: {format_money(profit)} ({profit_percent:.2f}%)")

            log_to_file(f"Koneƒçn√° hodnota portfolia: {format_money(final_value)}", log_file)
            log_to_file(f"Zisk/Ztr√°ta: {format_money(profit)} ({profit_percent:.2f}%)", log_file)

        sys.exit(0)

if __name__ == "__main__":
    import sys
    print("Spou≈°t√≠m Perun Trading System s TradingView API...", flush=True)

    try:
        # Test TradingView API
        print("Test TradingView API:", flush=True)

        # Vytvo≈ôen√≠ handleru pro TradingView
        handler = TA_Handler(
            symbol="BTCUSDT",
            exchange="BINANCE",
            screener="crypto",
            interval=Interval.INTERVAL_1_HOUR,
            timeout=10
        )
        print("Handler vytvo≈ôen", flush=True)

        # Z√≠sk√°n√≠ anal√Ωzy
        analysis = handler.get_analysis()
        print("Anal√Ωza z√≠sk√°na!", flush=True)

        # V√Ωpis v√Ωsledk≈Ø
        print(f"  Doporuƒçen√≠: {analysis.summary['RECOMMENDATION']}", flush=True)
        print(f"  RSI: {analysis.indicators['RSI']}", flush=True)
        print(f"  MACD: {analysis.indicators['MACD.macd']}", flush=True)
        print(f"  MACD Signal: {analysis.indicators['MACD.signal']}", flush=True)
        print(f"  Bollinger Bands (horn√≠): {analysis.indicators['BB.upper']}", flush=True)
        print(f"  Bollinger Bands (doln√≠): {analysis.indicators['BB.lower']}", flush=True)
        print("Test TradingView API √∫spƒõ≈°n√Ω!", flush=True)

        # Spu≈°tƒõn√≠ obchodn√≠ho syst√©mu
        print("Spou≈°t√≠m obchodn√≠ syst√©m...", flush=True)
        run_crypto_trading_system()
    except Exception as e:
        print(f"Chyba p≈ôi spu≈°tƒõn√≠: {e}", flush=True)
        traceback.print_exc()
        sys.exit(1)
