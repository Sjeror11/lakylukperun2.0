#!/usr/bin/env python3
"""
Jednoduch√Ω skript pro spu≈°tƒõn√≠ Perun Trading System v simulaƒçn√≠m re≈æimu.
"""

import os
import sys
import time
import random
from datetime import datetime

# Nastaven√≠ simulaƒçn√≠ho re≈æimu
print("=" * 50)
print("PERUN TRADING SYSTEM - SIMULAƒåN√ç RE≈ΩIM")
print("=" * 50)
print("Spou≈°t√≠m v simulaƒçn√≠m re≈æimu s generovan√Ωmi daty.")
print("≈Ω√°dn√© skuteƒçn√© obchody nebudou provedeny.")
print("=" * 50)

# Simulace obchodov√°n√≠
symbols = ["AAPL", "MSFT", "GOOG", "AMZN", "TSLA"]
portfolio = {
    "cash": 100000.0,
    "equity": 100000.0,
    "positions": {}
}

def generate_price(symbol, base_price=None):
    """Generuje n√°hodnou cenu pro symbol."""
    if base_price is None:
        # Z√°kladn√≠ ceny pro zn√°m√© symboly
        base_prices = {
            "AAPL": 170.0,
            "MSFT": 350.0,
            "GOOG": 140.0,
            "AMZN": 180.0,
            "TSLA": 180.0
        }
        base_price = base_prices.get(symbol, random.uniform(50.0, 500.0))
    
    # N√°hodn√° zmƒõna ceny (-1% a≈æ +1%)
    change = random.uniform(-0.01, 0.01)
    return base_price * (1 + change)

def simulate_market():
    """Simuluje tr≈æn√≠ data."""
    market_data = {}
    for symbol in symbols:
        price = generate_price(symbol)
        market_data[symbol] = {
            "price": price,
            "change": random.uniform(-0.05, 0.05),
            "volume": random.randint(100000, 10000000)
        }
    return market_data

def simulate_trade(symbol, side, quantity, price):
    """Simuluje obchod."""
    if side == "BUY":
        cost = quantity * price
        if cost > portfolio["cash"]:
            print(f"‚ö†Ô∏è Nedostatek hotovosti pro n√°kup {quantity} akci√≠ {symbol} za ${price:.2f} (celkem ${cost:.2f})")
            return False
        
        portfolio["cash"] -= cost
        if symbol in portfolio["positions"]:
            # Aktualizace existuj√≠c√≠ pozice
            position = portfolio["positions"][symbol]
            total_qty = position["quantity"] + quantity
            total_cost = position["quantity"] * position["avg_price"] + quantity * price
            position["avg_price"] = total_cost / total_qty
            position["quantity"] = total_qty
        else:
            # Vytvo≈ôen√≠ nov√© pozice
            portfolio["positions"][symbol] = {
                "quantity": quantity,
                "avg_price": price
            }
        print(f"‚úÖ N√°kup: {quantity} akci√≠ {symbol} za ${price:.2f} (celkem ${cost:.2f})")
        return True
    
    elif side == "SELL":
        if symbol not in portfolio["positions"]:
            print(f"‚ö†Ô∏è Nelze prodat {symbol}: Pozice neexistuje")
            return False
        
        position = portfolio["positions"][symbol]
        if position["quantity"] < quantity:
            print(f"‚ö†Ô∏è Nelze prodat {quantity} akci√≠ {symbol}: M√°te pouze {position['quantity']} akci√≠")
            return False
        
        proceeds = quantity * price
        portfolio["cash"] += proceeds
        position["quantity"] -= quantity
        if position["quantity"] == 0:
            del portfolio["positions"][symbol]
        print(f"‚úÖ Prodej: {quantity} akci√≠ {symbol} za ${price:.2f} (celkem ${proceeds:.2f})")
        return True

def update_portfolio(market_data):
    """Aktualizuje hodnotu portfolia na z√°kladƒõ aktu√°ln√≠ch tr≈æn√≠ch dat."""
    equity = portfolio["cash"]
    for symbol, position in list(portfolio["positions"].items()):
        if symbol in market_data:
            price = market_data[symbol]["price"]
            market_value = position["quantity"] * price
            equity += market_value
            
            # V√Ωpoƒçet zisku/ztr√°ty
            cost_basis = position["quantity"] * position["avg_price"]
            unrealized_pl = market_value - cost_basis
            unrealized_plpc = (price / position["avg_price"] - 1.0) * 100
            
            print(f"üìä {symbol}: {position['quantity']} akci√≠ @ ${position['avg_price']:.2f} | Aktu√°ln√≠ cena: ${price:.2f} | P/L: ${unrealized_pl:.2f} ({unrealized_plpc:.2f}%)")
    
    portfolio["equity"] = equity
    return equity

def generate_trading_signal():
    """Generuje obchodn√≠ sign√°l na z√°kladƒõ simulovan√© anal√Ωzy."""
    if random.random() < 0.3:  # 30% ≈°ance na obchodn√≠ sign√°l
        symbol = random.choice(symbols)
        side = random.choice(["BUY", "SELL"])
        quantity = random.randint(1, 10)
        return {
            "symbol": symbol,
            "side": side,
            "quantity": quantity
        }
    return None

def run_simulation():
    """Spou≈°t√≠ simulaci obchodov√°n√≠."""
    print("\nüìà Spou≈°t√≠m simulaci obchodov√°n√≠...")
    print(f"üí∞ Poƒç√°teƒçn√≠ kapit√°l: ${portfolio['cash']:.2f}")
    print(f"üè¶ Symboly: {', '.join(symbols)}")
    
    try:
        cycle = 0
        while True:
            cycle += 1
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            print(f"\n{'=' * 20} CYKLUS {cycle} ({now}) {'=' * 20}")
            
            # Simulace tr≈æn√≠ch dat
            market_data = simulate_market()
            for symbol in symbols:
                data = market_data[symbol]
                change_pct = data["change"] * 100
                change_dir = "‚ñ≤" if data["change"] > 0 else "‚ñº"
                print(f"üîç {symbol}: ${data['price']:.2f} {change_dir} {abs(change_pct):.2f}% | Objem: {data['volume']:,}")
            
            # Aktualizace portfolia
            equity = update_portfolio(market_data)
            print(f"\nüíº Portfolio: Hotovost ${portfolio['cash']:.2f} | Celkov√° hodnota ${equity:.2f} | Pozice: {len(portfolio['positions'])}")
            
            # Generov√°n√≠ obchodn√≠ho sign√°lu
            signal = generate_trading_signal()
            if signal:
                print(f"\nüîî Obchodn√≠ sign√°l: {signal['side']} {signal['quantity']} {signal['symbol']}")
                price = market_data[signal['symbol']]['price']
                simulate_trade(signal['symbol'], signal['side'], signal['quantity'], price)
            
            # ƒåek√°n√≠ na dal≈°√≠ cyklus
            print(f"\n‚è±Ô∏è ƒåek√°m 5 sekund na dal≈°√≠ cyklus...")
            time.sleep(5)
    
    except KeyboardInterrupt:
        print("\n\nüõë Simulace ukonƒçena u≈æivatelem")
        print(f"üí∞ Koneƒçn√Ω kapit√°l: ${portfolio['equity']:.2f}")
        print(f"üìä Zisk/Ztr√°ta: ${portfolio['equity'] - 100000.0:.2f} ({(portfolio['equity'] / 100000.0 - 1.0) * 100:.2f}%)")
        sys.exit(0)

if __name__ == "__main__":
    run_simulation()
