#!/usr/bin/env python3
"""
Perun Trading System - Multi-Crypto verze s TradingView API
Specializovan√° verze pro obchodov√°n√≠ s v√≠ce kryptomƒõnami 24/7 vyu≈æ√≠vaj√≠c√≠ technick√© indik√°tory z TradingView.
Podporuje obchodov√°n√≠ s v√≠ce kryptomƒõnami souƒçasnƒõ.
"""

import os
import sys
import time
import json
import random
import requests
import traceback
from tradingview_ta import TA_Handler, Interval
from datetime import datetime, timedelta

# API kl√≠ƒçe
ALPACA_API_KEY = "AKR88AOYG2LSYZL1RCVC"
ALPACA_API_SECRET = "jT363CePWmEYd9UizVMd6k20YjdjOhnZgNf4K2SJ"
ALPACA_BASE_URL = "https://api.alpaca.markets/v2"  # Trading API
DATA_BASE_URL = "https://data.alpaca.markets/v1beta3"  # Market Data API

# Nastaven√≠ pro TradingView API
TV_EXCHANGE = "BINANCE"
TV_SCREENER = "crypto"
TV_INTERVAL = Interval.INTERVAL_1_HOUR

# Hlaviƒçky pro Alpaca API po≈æadavky
ALPACA_HEADERS = {
    "APCA-API-KEY-ID": ALPACA_API_KEY,
    "APCA-API-SECRET-KEY": ALPACA_API_SECRET,
    "Content-Type": "application/json"
}

# üî• ENHANCED Hlaviƒçky pro Data API
ALPACA_DATA_HEADERS = {
    "APCA-API-KEY-ID": ALPACA_API_KEY,
    "APCA-API-SECRET-KEY": ALPACA_API_SECRET
}

# üî• ENHANCED Kryptomƒõny pro obchodov√°n√≠ - ALTSEASON READY (8 p√°r≈Ø)
CRYPTO_SYMBOLS = ["BTCUSD", "ETHUSD", "XRPUSD", "SOLUSD", "ADAUSD", "ARBUSD", "AVAXUSD", "DOTUSD"]

# üî• ENHANCED Nastaven√≠ rizika - VARIANTA A (Agresivn√≠)
MAX_POSITION_SIZE = 50  # Zv√Ω≈°eno z $30 na $50 (8.7% portfolia)
MIN_POSITION_SIZE = 25  # Zv√Ω≈°eno z $10 na $25
MAX_TOTAL_POSITIONS = 8  # Zv√Ω≈°eno z 6 na 8 pro v√≠ce p√°r≈Ø
MAX_EXPOSURE = 400  # Max $400 v pozic√≠ch (70% portfolia)
RISK_LIMIT_PERCENT = 0.02  # Maxim√°ln√≠ riziko na obchod (2% portfolia)

# Nastaven√≠ obchodn√≠ strategie
STRATEGY_NAME = "TradingView Strategy"
STRATEGY_DESCRIPTION = "Strategie vyu≈æ√≠vaj√≠c√≠ technick√© indik√°tory z TradingView pro generov√°n√≠ obchodn√≠ch sign√°l≈Ø."

# Funkce pro pr√°ci s Alpaca API
def get_account():
    """Z√≠sk√° informace o √∫ƒçtu."""
    try:
        response = requests.get(f"{ALPACA_BASE_URL}/account", headers=ALPACA_HEADERS)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ informac√≠ o √∫ƒçtu: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ informac√≠ o √∫ƒçtu: {e}")
        return None

def get_positions():
    """Z√≠sk√° aktu√°ln√≠ pozice."""
    try:
        response = requests.get(f"{ALPACA_BASE_URL}/positions", headers=ALPACA_HEADERS)
        if response.status_code == 200:
            positions = response.json()
            # Filtrujeme pouze kryptomƒõnov√© pozice
            crypto_positions = [p for p in positions if p.get("symbol") in CRYPTO_SYMBOLS]
            return crypto_positions
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ pozic: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return []
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ pozic: {e}")
        return []


def get_orders():
    """Z√≠sk√° aktu√°ln√≠ objedn√°vky."""
    try:
        response = requests.get(f"{ALPACA_BASE_URL}/orders", headers=ALPACA_HEADERS)
        if response.status_code == 200:
            orders = response.json()
            # Filtrujeme pouze kryptomƒõnov√© objedn√°vky
            crypto_orders = [o for o in orders if o.get("symbol") in CRYPTO_SYMBOLS]
            return crypto_orders
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ objedn√°vek: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return []
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ objedn√°vek: {e}")
        return []

def place_crypto_order(symbol, qty, side, order_type="market", time_in_force="gtc"):
    """Zad√° objedn√°vku na kryptomƒõnu."""
    try:
        data = {
            "symbol": symbol,
            "qty": str(qty),  # Alpaca vy≈æaduje qty jako string pro kryptomƒõny
            "side": side,
            "type": order_type,
            "time_in_force": time_in_force
        }
        response = requests.post(f"{ALPACA_BASE_URL}/orders", headers=ALPACA_HEADERS, json=data)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå Chyba p≈ôi zad√°v√°n√≠ objedn√°vky: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi zad√°v√°n√≠ objedn√°vky: {e}")
        return None

def cancel_order(order_id):
    """Zru≈°√≠ objedn√°vku."""
    try:
        response = requests.delete(f"{ALPACA_BASE_URL}/orders/{order_id}", headers=ALPACA_HEADERS)
        if response.status_code == 204:
            return True
        else:
            print(f"‚ùå Chyba p≈ôi ru≈°en√≠ objedn√°vky: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi ru≈°en√≠ objedn√°vky: {e}")
        return False
def get_tradingview_analysis(symbol):
    """Z√≠sk√° anal√Ωzu z TradingView pro dan√Ω symbol."""
    try:
        # P≈ôevod symbolu na form√°t pro TradingView (nap≈ô. BTCUSD -> BINANCE:BTCUSDT)
        if symbol == "BTC/USD":
            tv_symbol = "BTCUSDT"
            exchange = TV_EXCHANGE
        elif symbol == "ETH/USD":
            tv_symbol = "ETHUSDT"
            exchange = TV_EXCHANGE
        elif symbol == "XRP/USD":
            tv_symbol = "XRPUSDT"
            exchange = TV_EXCHANGE
        elif symbol == "SOL/USD":
            tv_symbol = "SOLUSDT"
            exchange = TV_EXCHANGE
        elif symbol == "DOGE/USD":
            tv_symbol = "DOGEUSDT"
            exchange = TV_EXCHANGE
        elif symbol == "ADA/USD":  # üî• NOV√â
            tv_symbol = "ADAUSDT"
            exchange = TV_EXCHANGE
        elif symbol == "ARB/USD":  # üî• NOV√â
            tv_symbol = "ARBUSDT"
            exchange = TV_EXCHANGE
        elif symbol == "XMRUSD":
            tv_symbol = "XMRUSDT"
            exchange = TV_EXCHANGE
        elif symbol == "ETH/USD":
            tv_symbol = "ETHUSDT"
            exchange = TV_EXCHANGE
        elif symbol == "SOL/USD":
            tv_symbol = "SOLUSDT"
            exchange = TV_EXCHANGE
        elif symbol == "AVAX/USD":
            tv_symbol = "AVAXUSDT"
            exchange = TV_EXCHANGE
        elif symbol == "LINKUSD":
            tv_symbol = "LINKUSDT"
            exchange = TV_EXCHANGE
        elif symbol == "MATICUSD":
            tv_symbol = "MATICUSDT"
            exchange = TV_EXCHANGE
        elif symbol == "DOT/USD":
            tv_symbol = "DOTUSDT"
            exchange = TV_EXCHANGE
        elif symbol == "UNIUSD":
            tv_symbol = "UNIUSDT"
            exchange = TV_EXCHANGE
        elif symbol == "AAVEUSD":
            tv_symbol = "AAVEUSDT"
            exchange = TV_EXCHANGE
        elif symbol == "LTCUSD":
            tv_symbol = "LTCUSDT"
            exchange = TV_EXCHANGE
        else:
            tv_symbol = symbol
            exchange = TV_EXCHANGE
            
        print(f"ÔøΩÔøΩ Z√≠sk√°v√°m anal√Ωzu z TradingView pro {exchange}:{tv_symbol}...")
        
        # Vytvo≈ôen√≠ handleru pro TradingView
        handler = TA_Handler(
            symbol=tv_symbol,
            exchange=exchange,
            screener=TV_SCREENER,
            interval=TV_INTERVAL,
            timeout=10
        )
        
        # Z√≠sk√°n√≠ anal√Ωzy
        analysis = handler.get_analysis()
        
        # V√Ωpis v√Ωsledk≈Ø
        print(f"  Doporuƒçen√≠: {analysis.summary["RECOMMENDATION"]}")
        print(f"  RSI: {analysis.indicators["RSI"]}")
        print(f"  MACD: {analysis.indicators["MACD.macd"]}")
        print(f"  MACD Signal: {analysis.indicators["MACD.signal"]}")
        print(f"  Bollinger Bands (horn√≠): {analysis.indicators["BB.upper"]}")
        print(f"  Bollinger Bands (doln√≠): {analysis.indicators["BB.lower"]}")
        
        return analysis
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ anal√Ωzy z TradingView: {e}")
        traceback.print_exc()
        return None

def get_rsi(symbol):
    """Z√≠sk√° RSI hodnotu z TradingView API."""
    analysis = get_tradingview_analysis(symbol)
    if analysis:
        return analysis.indicators["RSI"]
    else:
        # Pokud se nepoda≈ôilo z√≠skat anal√Ωzu, vr√°t√≠me simulovanou hodnotu
        print("Pou≈æ√≠v√°m simulovan√Ω RSI indik√°tor")
        base = random.random()  # 0.0 a≈æ 1.0
        if base < 0.1:  # 10% ≈°ance na p≈ôeprodanost (n√≠zk√© RSI)
            return random.uniform(20, 30)
        elif base > 0.9:  # 10% ≈°ance na p≈ôekoupenost (vysok√© RSI)
            return random.uniform(70, 80)
        else:  # 80% ≈°ance na neutr√°ln√≠ hodnotu
            return random.uniform(40, 60)
def get_price(symbol):
    """üî• ENHANCED - Z√≠sk√° re√°lnou cenu z Alpaca API."""
    # Z√≠sk√° re√°lnou cenu z Alpaca API
    price = get_price_from_api(symbol)
    
    if price is not None:
        print(f"üí∞ Re√°ln√° cena {symbol}: ${price:,.2f}")
        return price
    
    # Fallback - pouze pro emergenci s aktualizovan√Ωmi cenami
    print(f"‚ö†Ô∏è Nelze z√≠skat re√°lnou cenu pro {symbol}, pou≈æ√≠v√°m fallback")
    fallback_prices = {
        "BTCUSD": 105842.0,   # Aktu√°ln√° BTC cena
        "ETHUSD": 2532.0,     # Aktu√°ln√° ETH cena
        "XRPUSD": 2.18,       # Aktu√°ln√° XRP cena
        "SOLUSD": 150.47,     # Aktu√°ln√° SOL cena
        "ADAUSD": 0.8084,     # Aktu√°ln√° ADA cena (z CoinGecko)
        "ARBUSD": 1.003       # Aktu√°ln√° ARB cena (z CoinGecko)
    }
    return fallback_prices.get(symbol, 1.0)

def get_price_from_api(symbol):
    """üî• OPRAVENO - Z√≠sk√° aktu√°ln√≠ cenu pro dan√Ω symbol z Alpaca API."""
    try:
        # P≈ôevod z BTCUSD na BTC/USD form√°t
        if symbol == "BTCUSD":
            api_symbol = "BTC/USD"
        elif symbol == "ETHUSD":
            api_symbol = "ETH/USD"
        elif symbol == "XRPUSD":
            api_symbol = "XRP/USD"
        elif symbol == "SOLUSD":
            api_symbol = "SOL/USD"
        elif symbol == "ADAUSD":
            # ADA nen√≠ dostupn√° v Alpaca US
            print(f"üí∞ ADA fallback cena: $0.8084")
            return 0.8084
        elif symbol == "ARBUSD":
            # ARB nen√≠ dostupn√Ω v Alpaca US  
            print(f"üí∞ ARB fallback cena: $1.003")
            return 1.003
        else:
            api_symbol = symbol
        
        # Spr√°vn√Ω Alpaca endpoint
        url = f"https://data.alpaca.markets/v1beta3/crypto/us/snapshots?symbols={api_symbol}"
        
        response = requests.get(url, headers=ALPACA_DATA_HEADERS)
        
        if response.status_code == 200:
            data = response.json()
            if "snapshots" in data and api_symbol in data["snapshots"]:
                price = float(data["snapshots"][api_symbol]["latestTrade"]["p"])
                print(f"üí∞ Re√°ln√° cena {symbol}: ${price:,.2f}")
                return price
            else:
                print(f"‚ö†Ô∏è Symbol {api_symbol} nenalezen v odpovƒõdi")
                return None
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ ceny: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ ceny: {e}")
        return None
        return analysis.indicators["RSI"]
    else:
        # Pokud se nepoda≈ôilo z√≠skat anal√Ωzu, vr√°t√≠me simulovanou hodnotu
        print("Pou≈æ√≠v√°m simulovan√Ω RSI indik√°tor")
        base = random.random()  # 0.0 a≈æ 1.0
        if base < 0.1:  # 10% ≈°ance na p≈ôeprodanost (n√≠zk√© RSI)
            return random.uniform(20, 30)
        elif base > 0.9:  # 10% ≈°ance na p≈ôekoupenost (vysok√© RSI)
            return random.uniform(70, 80)
        else:  # 80% ≈°ance na neutr√°ln√≠ hodnotu
            return random.uniform(40, 60)
    """Z√≠sk√° aktu√°ln√≠ cenu pro dan√Ω symbol z Alpaca API."""
    try:
        # Pou≈æijeme Alpaca API m√≠sto TAAPI.IO pro z√≠sk√°n√≠ ceny
        response = requests.get(f"{ALPACA_BASE_URL}/assets/{symbol}", headers=ALPACA_HEADERS)
        if response.status_code == 200:
            data = response.json()
            return float(data.get("price", 0))
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ ceny z Alpaca: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            
            # Z√°lo≈æn√≠ metoda - pou≈æijeme cenu z pozice, pokud existuje
            positions = get_positions()
            for position in positions:
                if position.get("symbol") == symbol:
                    return float(position.get("current_price", 0))
            
            return None
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ ceny: {e}")
        return None

# Funkce pro anal√Ωzu a generov√°n√≠ obchodn√≠ch sign√°l≈Ø
# Funkce pro anal√Ωzu a generov√°n√≠ obchodn√≠ch sign√°l≈Ø
def analyze_crypto(symbol):
    """Analyzuje kryptomƒõnu a generuje obchodn√≠ sign√°l na z√°kladƒõ TradingView indik√°tor≈Ø."""
    print(f"üîç Analyzuji {symbol}...")

    # Z√≠sk√°n√≠ ceny z Alpaca API
    current_price = get_price(symbol)

    # Z√≠sk√°n√≠ anal√Ωzy z TradingView
    analysis = get_tradingview_analysis(symbol)
    
    # Kontrola, zda se poda≈ôilo z√≠skat anal√Ωzu
    if not analysis or not current_price:
        print(f"‚ùå Nepoda≈ôilo se z√≠skat v≈°echny indik√°tory pro {symbol}")
        return None

    # Inicializace sign√°lu a d≈Øvƒõry
    signal = None
    confidence = 0.5
    reasons = []

    # Anal√Ωza doporuƒçen√≠
    recommendation = analysis.summary["RECOMMENDATION"]
    if "BUY" in recommendation or "STRONG_BUY" in recommendation:
        signal = "buy"
        confidence += 0.3
        reasons.append(f"TradingView doporuƒçuje {recommendation}")
    elif "SELL" in recommendation or "STRONG_SELL" in recommendation:
        signal = "sell"
        confidence += 0.3
        reasons.append(f"TradingView doporuƒçuje {recommendation}")

    # Anal√Ωza RSI
    rsi = analysis.indicators["RSI"]
    if rsi < 30:  # P≈ôekoupeno - sign√°l k n√°kupu
        if signal != "buy":
            confidence += 0.1
        signal = "buy"
        reasons.append(f"RSI je n√≠zk√© ({rsi:.2f} < 30) - p≈ôekoupeno, sign√°l k n√°kupu")
    elif rsi > 70:  # P≈ôeprod√°no - sign√°l k prodeji
        if signal != "sell":
            confidence += 0.1
        signal = "sell"
        reasons.append(f"RSI je vysok√© ({rsi:.2f} > 70) - p≈ôeprod√°no, sign√°l k prodeji")

    # Anal√Ωza MACD
    macd = analysis.indicators["MACD.macd"]
    macd_signal = analysis.indicators["MACD.signal"]
    if macd > macd_signal:  # MACD nad sign√°ln√≠ lini√≠ - sign√°l k n√°kupu
        if signal != "buy":
            confidence += 0.1
        signal = "buy"
        reasons.append(f"MACD ({macd:.2f}) je nad sign√°ln√≠ lini√≠ ({macd_signal:.2f}) - sign√°l k n√°kupu")
    elif macd < macd_signal:  # MACD pod sign√°ln√≠ lini√≠ - sign√°l k prodeji
        if signal != "sell":
            confidence += 0.1
        signal = "sell"
        reasons.append(f"MACD ({macd:.2f}) je pod sign√°ln√≠ lini√≠ ({macd_signal:.2f}) - sign√°l k prodeji")

    # Anal√Ωza Bollinger Bands
    bb_upper = analysis.indicators["BB.upper"]
    bb_lower = analysis.indicators["BB.lower"]
    if current_price <= bb_lower:  # Cena pod doln√≠ hranic√≠ - sign√°l k n√°kupu
        if signal != "buy":
            confidence += 0.1
        signal = "buy"
        reasons.append(f"Cena ({current_price:.2f}) je pod doln√≠ hranic√≠ Bollinger Bands ({bb_lower:.2f}) - sign√°l k n√°kupu")
    elif current_price >= bb_upper:  # Cena nad horn√≠ hranic√≠ - sign√°l k prodeji
        if signal != "sell":
            confidence += 0.1
        signal = "sell"
        reasons.append(f"Cena ({current_price:.2f}) je nad horn√≠ hranic√≠ Bollinger Bands ({bb_upper:.2f}) - sign√°l k prodeji")

    # Pokud nem√°me sign√°l, vr√°t√≠me None
    if signal is None:
        print(f"  {symbol}: ≈Ω√°dn√Ω obchodn√≠ sign√°l")
        return None

    # üß† SMART SELL: Pro SELL pou≈æ√≠vat skuteƒçnou pozici
    if signal == "sell":
        # Pro SELL - najdi existuj√≠c√≠ pozici
        positions = get_positions()
        existing_qty = 0
        
        if positions:
            for pos in positions:
                if pos.get("symbol") == symbol:
                    existing_qty = float(pos.get("qty", 0))
                    break
        
        if existing_qty <= 0:
            print(f"  {symbol}: ≈Ω√°dn√° pozice k prodeji")
            return None
            
        # Prodej cel√© existuj√≠c√≠ pozice
        qty = existing_qty
        print(f"  üéØ SELL: Prod√°v√°m celou pozici {qty:.8f} {symbol}")
        
    else:
        # Pro BUY - p≈Øvodn√≠ v√Ωpoƒçet
        account = get_account()
        if not account:
            return None

        portfolio_value = float(account.get("portfolio_value", 0))
        risk_amount = portfolio_value * RISK_LIMIT_PERCENT

        # Omezen√≠ velikosti pozice
        max_qty_by_risk = risk_amount / current_price
        max_qty_by_limit = MAX_POSITION_SIZE / current_price
        qty = min(max_qty_by_risk, max_qty_by_limit)

        # Zaji≈°tƒõn√≠ minim√°ln√≠ velikosti pozice
        min_qty = MIN_POSITION_SIZE / current_price
        qty = max(qty, min_qty)
        # Zaokrouhlen√≠ na 8 desetinn√Ωch m√≠st (bƒõ≈æn√© pro kryptomƒõny)
        qty = round(qty, 8)

        # Minim√°ln√≠ mno≈æstv√≠ pro obchodov√°n√≠
        if qty < 0.0001:
            qty = 0.0001

    return {
        "symbol": symbol,
        "side": signal,
        "qty": qty,
        "price": current_price,
        "confidence": confidence,
        "reasons": reasons,
        "indicators": {
            "recommendation": recommendation,
            "rsi": rsi,
            "macd": macd,
            "macd_signal": macd_signal,
            "bb_upper": bb_upper,
            "bb_lower": bb_lower
        }
    }

def format_money(amount):
    """Form√°tuje penƒõ≈æn√≠ ƒç√°stku."""
    return f"${amount:.2f}"
def format_crypto(amount):
    """Form√°tuje mno≈æstv√≠ kryptomƒõny."""
    if amount < 0.001:
        return f"{amount:.8f}"
    elif amount < 1:
        return f"{amount:.6f}"
    else:
        return f"{amount:.4f}"

def log_to_file(message, log_file="trading_log.txt"):
    """Zap√≠≈°e zpr√°vu do logovac√≠ho souboru."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(log_file, "a") as f:
        f.write(f"[{timestamp}] {message}\n")

def run_crypto_trading_system():
    """Spou≈°t√≠ obchodn√≠ syst√©m pro kryptomƒõny."""
    print("=" * 60)
    print("üî• PERUN ENHANCED - ALTSEASON READY TRADING SYSTEM")
    print("=" * 60)
    print("Spou≈°t√≠m VYLEP≈†EN√ù obchodn√≠ syst√©m s re√°ln√Ωmi cenami a altseason p√°ry.")
    print(f"üöÄ Obchodovan√© symboly: {', '.join(CRYPTO_SYMBOLS)}")
    print(f"üí∞ Position size: ${MAX_POSITION_SIZE} | Max pozice: {MAX_TOTAL_POSITIONS}")
    print(f"üéØ Confidence threshold: 0.65 | Interval: 10 minut")
    print(f"‚ö° Strategie: {STRATEGY_NAME} - Enhanced")
    print("=" * 50)
    
    # Vytvo≈ôen√≠ logovac√≠ho souboru
    log_file = "trading_log.txt"
    log_to_file("=== SPU≈†TƒöN√ç OBCHODN√çHO SYST√âMU ===", log_file)
    
    # Z√≠sk√°n√≠ informac√≠ o √∫ƒçtu
    account = get_account()
    if not account:
        print("‚ùå Nelze z√≠skat informace o √∫ƒçtu. Ukonƒçuji.")
        return
    
    print(f"\nüìä Informace o √∫ƒçtu:")
    print(f"ID √∫ƒçtu: {account.get('id')}")
    print(f"Status √∫ƒçtu: {account.get('status')}")
    print(f"Hotovost: {format_money(float(account.get('cash', 0)))}")
    print(f"Hodnota portfolia: {format_money(float(account.get('portfolio_value', 0)))}")
    
    log_to_file(f"Poƒç√°teƒçn√≠ hodnota portfolia: {format_money(float(account.get('portfolio_value', 0)))}", log_file)
    
    # Hlavn√≠ smyƒçka
    try:
        cycle = 0
        while True:
            cycle += 1
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            print(f"\n{'=' * 20} CYKLUS {cycle} ({now}) {'=' * 20}")
            log_to_file(f"CYKLUS {cycle} ({now})", log_file)
            
            # Z√≠sk√°n√≠ informac√≠ o √∫ƒçtu pro portfolio p≈ôehled
            account = get_account()
            if account:
                cash = float(account.get("cash", 0))
                portfolio_value = float(account.get("portfolio_value", 0))
                print(f"\nüí∞ Portfolio p≈ôehled:")
                print(f"  Hotovost: {format_money(cash)}")
                print(f"  Hodnota portfolia: {format_money(portfolio_value)}")
            
            # Z√≠sk√°n√≠ aktu√°ln√≠ch pozic
            positions = get_positions()
            print(f"\nüìà Aktu√°ln√≠ krypto pozice ({len(positions)}):")
            for position in positions:
                symbol = position.get("symbol")
                qty = float(position.get("qty", 0))
                avg_entry_price = float(position.get("avg_entry_price", 0))
                current_price = float(position.get("current_price", 0))
                market_value = float(position.get("market_value", 0))
                unrealized_pl = float(position.get("unrealized_pl", 0))
                unrealized_plpc = float(position.get("unrealized_plpc", 0)) * 100
                
                position_info = f"{symbol}: {format_crypto(qty)} @ {format_money(avg_entry_price)} | Aktu√°ln√≠ cena: {format_money(current_price)} | P/L: {format_money(unrealized_pl)} ({unrealized_plpc:.2f}%)"
                print(f"  {position_info}")
                log_to_file(f"Pozice: {position_info}", log_file)
            
            # Z√≠sk√°n√≠ aktu√°ln√≠ch objedn√°vek
            orders = get_orders()
            print(f"\nüìã Aktu√°ln√≠ krypto objedn√°vky ({len(orders)}):")
            for order in orders:
                order_id = order.get("id")
                symbol = order.get("symbol")
                side = order.get("side")
                qty = float(order.get("qty", 0))
                order_type = order.get("type")
                status = order.get("status")
                
                order_info = f"{symbol}: {side.upper()} {format_crypto(qty)} ({order_type}) | Status: {status}"
                print(f"  {order_info}")
                log_to_file(f"Objedn√°vka: {order_info}", log_file)
            
            # Anal√Ωza a generov√°n√≠ obchodn√≠ch sign√°l≈Ø
            for symbol in CRYPTO_SYMBOLS:
                signal = analyze_crypto(symbol)
                if signal:
                    side = signal.get("side")
                    qty = signal.get("qty")
                    price = signal.get("price")
                    confidence = signal.get("confidence")
                    reasons = signal.get("reasons", [])
                    indicators = signal.get("indicators", {})
                    
                    print(f"\nüîî Obchodn√≠ sign√°l pro {symbol}:")
                    print(f"  Akce: {side.upper()}")
                    print(f"  Mno≈æstv√≠: {format_crypto(qty)}")
                    print(f"  Cena: {format_money(price)}")
                    print(f"  D≈Øvƒõra: {confidence:.2f}")
                    print(f"  D≈Øvody:")
                    for reason in reasons:
                        print(f"    - {reason}")
                    
                    print(f"  Indik√°tory:")
                    print(f"    - Doporuƒçen√≠: {indicators['recommendation']}")
                    print(f"    - RSI: {indicators['rsi']:.2f}")
                    print(f"    - MACD: {indicators['macd']:.2f}")
                    print(f"    - MACD Signal: {indicators['macd_signal']:.2f}")
                    print(f"    - BB Upper: {indicators['bb_upper']:.2f}")
                    print(f"    - BB Lower: {indicators['bb_lower']:.2f}")
                    
                    signal_info = f"{symbol}: {side.upper()} {format_crypto(qty)} @ {format_money(price)} | D≈Øvƒõra: {confidence:.2f}"
                    log_to_file(f"Sign√°l: {signal_info}", log_file)
                    for reason in reasons:
                        log_to_file(f"  - {reason}", log_file)
                    
                    # Proveden√≠ obchodu na z√°kladƒõ sign√°lu
                    if confidence > 0.65:  # üî• ENHANCED: Sn√≠≈æeno z 0.7 na 0.65 pro v√≠ce sign√°l≈Ø
                        # üî• PANIC/PROFIT TAKING: Pouze p≈ôi extr√©mn√≠ch situac√≠ch
                        if side == "sell":
                            # Kontrola, zda m√°me pozici k prodeji
                            existing_position = next((p for p in positions if p.get("symbol") == symbol), None)
                            
                            if not existing_position:
                                no_position_message = f"SELL blokov√°n - nem√°me pozici k prodeji pro {symbol}"
                                print(f"  üõ°Ô∏è {no_position_message}")
                                log_to_file(f"Bez pozice: {no_position_message}", log_file)
                                continue
                            
                            # Z√≠sk√°me √∫daje o pozici
                            entry_price = float(existing_position.get("avg_entry_price", 0))
                            current_price = price
                            
                            if entry_price > 0:
                                profit_pct = (current_price - entry_price) / entry_price * 100
                                
                                # Z√≠sk√°me aktu√°ln√≠ anal√Ωzu pro dodateƒçnou kontrolu
                                analysis = get_tradingview_analysis(symbol)
                                rsi = 50  # default
                                if analysis:
                                    rsi = analysis.indicators["RSI"]
                                
                                # üî• ENHANCED PANIC/PROFIT TAKING podm√≠nky (Varianta B):
                                # 1. Profit taking: Zisk > 2% A RSI > 75 (vyv√°≈æen√©)
                                # 2. Quick profit: Zisk > 8% (bez dal≈°√≠ch podm√≠nek)
                                # 3. Stop loss: Ztr√°ta < -4% (ochrana kapit√°lu)
                                # 4. Time stop: Pozice star≈°√≠ 24h s jak√Ωmkoli ziskem
                                
                                # Kontrola st√°≈ô√≠ pozice
                                try:
                                    # Pozice API vrac√≠ created_at v ISO form√°tu
                                    position_created = datetime.fromisoformat(position.get('created_at', '').replace('Z', '+00:00'))
                                    position_age_hours = (datetime.now().astimezone() - position_created).total_seconds() / 3600
                                except:
                                    position_age_hours = 0  # fallback
                                
                                profit_taking = (profit_pct > 2 and rsi > 75)
                                quick_profit = (profit_pct > 8)
                                stop_loss = (profit_pct < -4)
                                time_stop = (position_age_hours > 24 and profit_pct > 0)
                                
                                if not (profit_taking or quick_profit or stop_loss or time_stop):
                                    panic_block_message = f"SELL blokov√°n - nesplnƒõny podm√≠nky (P/L: {profit_pct:+.1f}%, RSI: {rsi:.1f}, St√°≈ô√≠: {position_age_hours:.1f}h). Pot≈ôeba: Zisk>2% a RSI>75 NEBO zisk>8% NEBO ztr√°ta<-4% NEBO 24h+ s ziskem"
                                    print(f"  üõ°Ô∏è {panic_block_message}")
                                    log_to_file(f"Panic blok: {panic_block_message}", log_file)
                                    continue
                                else:
                                    if quick_profit:
                                        reason = "Quick profit (8%+)"
                                    elif profit_taking:
                                        reason = "Profit taking (2%+ p≈ôi RSI>75)"
                                    elif time_stop:
                                        reason = f"Time stop (24h+ pozice s ziskem, st√°≈ô√≠: {position_age_hours:.1f}h)"
                                    else:
                                        reason = "Stop loss (-4%)"
                                    panic_sell_message = f"SELL povolen - {reason} (P/L: {profit_pct:+.1f}%, RSI: {rsi:.1f}, Entry: ${entry_price:.2f}, Current: ${current_price:.2f})"
                                    print(f"  üí∞ {panic_sell_message}")
                                    log_to_file(f"Panic sell: {panic_sell_message}", log_file)
                            else:
                                entry_error_message = f"SELL blokov√°n - nelze urƒçit vstupn√≠ cenu pozice"
                                print(f"  ‚ö†Ô∏è {entry_error_message}")
                                log_to_file(f"Entry chyba: {entry_error_message}", log_file)
                                continue
                            
                        # üî• ENHANCED kontroly pro BUY sign√°ly
                        if side == "buy":
                            # Kontrola poƒçtu pozic
                            if len(positions) >= MAX_TOTAL_POSITIONS:
                                max_positions_message = f"BUY blokov√°n - dosa≈æen maxim√°ln√≠ poƒçet pozic ({len(positions)}/{MAX_TOTAL_POSITIONS})"
                                print(f"  üõ°Ô∏è {max_positions_message}")
                                log_to_file(f"Max pozice: {max_positions_message}", log_file)
                                continue
                            
                            # Kontrola celkov√©ho exposure (70% portfolia)
                            total_market_value = sum(float(p.get("market_value", 0)) for p in positions)
                            if total_market_value + (qty * price) > MAX_EXPOSURE:
                                exposure_message = f"BUY blokov√°n - p≈ôekroƒçen max exposure (${total_market_value:.2f} + ${qty * price:.2f} > ${MAX_EXPOSURE})"
                                print(f"  üõ°Ô∏è {exposure_message}")
                                log_to_file(f"Max exposure: {exposure_message}", log_file)
                                continue
                        
                        # Kontrola, zda ji≈æ nem√°me otev≈ôenou pozici
                        existing_position = next((p for p in positions if p.get("symbol") == symbol), None)
                        
                        # Pokud m√°me pozici a sign√°l je stejn√Ω smƒõr, p≈ôeskoƒç√≠me
                        if existing_position:
                            position_side = "sell" if float(existing_position.get("qty", 0)) < 0 else "buy"
                            if position_side == side:
                                skip_message = f"Ji≈æ m√°me otev≈ôenou pozici {position_side.upper()} pro {symbol}, p≈ôeskakuji"
                                print(f"  ‚ö†Ô∏è {skip_message}")
                                log_to_file(f"P≈ôeskoƒçeno: {skip_message}", log_file)
                                continue
                        
                        trade_message = f"Prov√°d√≠m obchod: {side.upper()} {format_crypto(qty)} {symbol} @ {format_money(price)}"
                        print(f"  ‚úÖ {trade_message}")
                        
                        log_to_file(f"Obchod: {trade_message}", log_file)
                        

                        result = place_crypto_order(symbol, qty, side)
                        if result:
                            success_message = f"Obchod zad√°n: ID objedn√°vky {result.get('id')}"
                            print(f"  ‚úÖ {success_message}")
                            log_to_file(f"√öspƒõch: {success_message}", log_file)
                        else:
                            error_message = f"Obchod se nezda≈ôil"
                            print(f"  ‚ùå {error_message}")
                            log_to_file(f"Chyba: {error_message}", log_file)
                    else:
                        low_confidence_message = f"D≈Øvƒõra sign√°lu je p≈ô√≠li≈° n√≠zk√° ({confidence:.2f}), neprov√°d√≠m obchod"
                        print(f"  ‚ö†Ô∏è {low_confidence_message}")
                        log_to_file(f"N√≠zk√° d≈Øvƒõra: {low_confidence_message}", log_file)
                else:
                    no_signal_message = f"{symbol}: ≈Ω√°dn√Ω obchodn√≠ sign√°l"
                    print(f"  {no_signal_message}")
                    log_to_file(no_signal_message, log_file)
            
            # ƒåek√°n√≠ na dal≈°√≠ cyklus
            wait_time = 600  # üî• ENHANCED: 10 minut mezi cykly (zrychleno pro altseason)
            print(f"\n‚è±Ô∏è ƒåek√°m {wait_time} sekund na dal≈°√≠ cyklus...")
            log_to_file(f"ƒåek√°n√≠ {wait_time} sekund na dal≈°√≠ cyklus", log_file)
            time.sleep(wait_time)
    
    except KeyboardInterrupt:
        print("\n\nÔøΩÔøΩ Obchodn√≠ syst√©m ukonƒçen u≈æivatelem")
        log_to_file("=== UKONƒåEN√ç OBCHODN√çHO SYST√âMU U≈ΩIVATELEM ===", log_file)
        
        # Z√≠sk√°n√≠ aktu√°ln√≠ch informac√≠ o √∫ƒçtu
        final_account = get_account()
        if final_account:
            final_value = float(final_account.get("portfolio_value", 0))
            initial_value = float(account.get("portfolio_value", 0))
            profit = final_value - initial_value
            profit_percent = (profit / initial_value) * 100 if initial_value > 0 else 0
            
            print(f"üí∞ Koneƒçn√° hodnota portfolia: {format_money(final_value)}")
            print(f"üìä Zisk/Ztr√°ta: {format_money(profit)} ({profit_percent:.2f}%)")
            
            log_to_file(f"Koneƒçn√° hodnota portfolia: {format_money(final_value)}", log_file)
            log_to_file(f"Zisk/Ztr√°ta: {format_money(profit)} ({profit_percent:.2f}%)", log_file)
        
        sys.exit(0)

if __name__ == "__main__":
    run_crypto_trading_system()


def get_crypto_prices_bulk(symbols):
    """Z√≠sk√° ceny v√≠ce kryptomƒõn najednou p≈ôes spr√°vn√Ω Alpaca endpoint."""
    if not symbols:
        return {}
    
    try:
        # Spojen√≠ symbol≈Ø do jednoho ≈ôetƒõzce
        symbols_str = ",".join(symbols)
        url = f"https://data.alpaca.markets/v1beta3/crypto/us/snapshots?symbols={symbols_str}"
        
        response = requests.get(url, headers=ALPACA_HEADERS)
        
        if response.status_code == 200:
            data = response.json()
            snapshots = data.get('snapshots', {})
            
            prices = {}
            for symbol, snapshot in snapshots.items():
                # Preferujeme latest trade price
                latest_trade = snapshot.get('latestTrade', {})
                trade_price = latest_trade.get('p')
                
                if trade_price:
                    prices[symbol] = float(trade_price)
                else:
                    # Fallback na ask cenu z quote
                    latest_quote = snapshot.get('latestQuote', {})
                    ask_price = latest_quote.get('ap')
                    if ask_price:
                        prices[symbol] = float(ask_price)
            
            return prices
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ cen: {response.status_code} - {response.text}")
            return {}
            
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ cen: {e}")
        return {}

def get_crypto_price(symbol):
    """Z√≠sk√° aktu√°ln√≠ cenu kryptomƒõny p≈ôes spr√°vn√Ω Alpaca endpoint."""
    try:
        url = f"https://data.alpaca.markets/v1beta3/crypto/us/snapshots?symbols={symbol}"
        response = requests.get(url, headers=ALPACA_HEADERS)
        if response.status_code == 200:
            data = response.json()
            snapshots = data.get('snapshots', {})
            snapshot = snapshots.get(symbol, {})
            
            # Preferujeme latest trade price
            latest_trade = snapshot.get('latestTrade', {})
            trade_price = latest_trade.get('p')
            
            if trade_price:
                return float(trade_price)
            
            # Fallback na ask cenu
            latest_quote = snapshot.get('latestQuote', {})
            ask_price = latest_quote.get('ap')
            if ask_price:
                return float(ask_price)
            
            return None
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ ceny {symbol}: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ ceny {symbol}: {e}")
        return None

def get_current_crypto_price(symbol):
    """Alias pro get_crypto_price pro zpƒõtnou kompatibilitu."""
    return get_crypto_price(symbol)
