#!/usr/bin/env python3
"""
News-Perun Trading Integration
Napojen√≠ crypto news sentiment anal√Ωzy na Perun trading syst√©m
Autor: Claude + LakyLuk  
Datum: 24.6.2025
Inspirov√°no YouTube-Perun integrac√≠
"""

import json
import time
import os
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import signal
import sys

# Import News modul≈Ø
try:
    from news_scraper import CryptoNewsScraper
    from translator import CryptoNewsTranslator
    from sentiment_analyzer import CryptoSentimentAnalyzer
    from news_notifications import NewsNotifications
    # Import z hlavn√≠ho Perun syst√©mu
    import perun_tradingview_multi as perun_main
except ImportError as e:
    print(f"‚ùå Chyba importu News modul≈Ø: {e}")
    sys.exit(1)

class NewsPerunIntegration:
    def __init__(self):
        self.setup_logging()
        self.logger = logging.getLogger(__name__)
        
        # Konfigurace (scheduled mode)
        self.config = {
            'scheduled_times': ['11:00', '20:00'],  # Anal√Ωza 2x dennƒõ
            'sentiment_threshold': 0.4,  # Pr√°h pro generov√°n√≠ sign√°l≈Ø
            'confidence_threshold': 0.6,  # Minim√°ln√≠ d≈Øvƒõryhodnost
            'max_news_influence': 0.3,  # Max vliv News na rozhodov√°n√≠ (30%)
            'enabled_cryptos': ['BTCUSD', 'ETHUSD', 'XRPUSD', 'SOLUSD', 'ADAUSD', 'ARBUSD', 'AVAXUSD', 'DOTUSD'],
            'max_articles_to_analyze': 15  # Limit ƒçl√°nk≈Ø pro rychlost
        }
        
        # News analyzery
        self.scraper = None
        self.translator = None
        self.analyzer = None
        self.last_news_analysis = None
        self.last_analysis_time = None
        
        # Sign√°ly pro Perun
        self.news_signals = {}
        
        # Notifikace
        self.notifier = NewsNotifications()
        
        # Status
        self.running = False
        
        self.logger.info("üöÄ NewsPerunIntegration inicializov√°n")
    
    def setup_logging(self):
        """Nastaven√≠ logov√°n√≠"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('news_perun_integration.log'),
                logging.StreamHandler()
            ]
        )
    
    def initialize_analyzers(self):
        """Inicializace News analyz√©r≈Ø"""
        try:
            self.logger.info("üîß Inicializuji News analyz√©ry...")
            
            self.scraper = CryptoNewsScraper()
            self.translator = CryptoNewsTranslator() 
            self.analyzer = CryptoSentimentAnalyzer()
            
            # Naƒçten√≠ cache pro rychlost
            self.translator.load_cache()
            
            self.logger.info("‚úÖ News analyz√©ry inicializov√°ny")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Chyba p≈ôi inicializaci analyz√©r≈Ø: {e}")
            return False
    
    def perform_news_analysis(self):
        """Hlavn√≠ News anal√Ωza"""
        try:
            self.logger.info("üì∞ Spou≈°t√≠m News sentiment anal√Ωzu...")
            self.notifier.notify_analysis_started()
            
            # 1. Scraping ƒçl√°nk≈Ø
            self.logger.info("üì° Stahuji crypto ƒçl√°nky...")
            articles = self.scraper.scrape_all_sources()
            
            if not articles:
                self.logger.warning("‚ö†Ô∏è ≈Ω√°dn√© ƒçl√°nky nenalezeny")
                return None
            
            self.logger.info(f"‚úÖ Nalezeno {len(articles)} ƒçl√°nk≈Ø")
            
            # 2. Limitace pro rychlost (jako u YouTube)
            articles_to_analyze = articles[:self.config['max_articles_to_analyze']]
            
            # 3. P≈ôeklad
            self.logger.info("üåê P≈ôekl√°d√°m ƒçl√°nky...")
            translated_articles = self.translator.translate_articles_batch(articles_to_analyze)
            
            # 4. Sentiment anal√Ωza
            self.logger.info("ü§ñ AI sentiment anal√Ωza...")
            analyzed_articles = self.analyzer.analyze_articles_batch(translated_articles)
            
            # 5. Generov√°n√≠ souhrnu
            summary = self.analyzer.generate_summary_report(analyzed_articles)
            
            # 6. Ulo≈æen√≠ cache
            self.translator.save_cache()
            
            # 7. Ulo≈æen√≠ v√Ωsledk≈Ø
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f'news_analysis_{timestamp}.json'
            
            analysis_data = {
                'timestamp': datetime.now().isoformat(),
                'summary': summary,
                'articles': analyzed_articles[:10],  # Pouze top 10 pro rychlost
                'total_articles_found': len(articles),
                'articles_analyzed': len(analyzed_articles)
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(analysis_data, f, ensure_ascii=False, indent=2, default=str)
            
            self.last_news_analysis = analysis_data
            self.last_analysis_time = datetime.now()
            
            # Notifikace o dokonƒçen√≠
            self.notifier.notify_analysis_completed(summary)
            
            self.logger.info(f"‚úÖ News anal√Ωza dokonƒçena: {filename}")
            return analysis_data
            
        except Exception as e:
            self.logger.error(f"‚ùå Chyba p≈ôi News anal√Ωze: {e}")
            return None
    
    def generate_news_signals(self, analysis_data):
        """Generov√°n√≠ trading sign√°l≈Ø z News anal√Ωzy"""
        if not analysis_data:
            return {}
        
        signals = {}
        summary = analysis_data.get('summary', {})
        articles = analysis_data.get('articles', [])
        
        try:
            # Celkov√Ω sentiment
            overall_sentiment = summary.get('average_sentiment', 0.0)
            total_articles = summary.get('total_articles', 0)
            
            # Pro ka≈ædou kryptomƒõnu
            for crypto in self.config['enabled_cryptos']:
                crypto_base = crypto.replace('USD', '')  # BTC, ETH, XRP...
                
                # Naj√≠t ƒçl√°nky relevantn√≠ pro tuto kryptomƒõnu
                relevant_articles = []
                for article in articles:
                    sentiment_data = article.get('sentiment', {})
                    crypto_coins = sentiment_data.get('crypto_coins', [])
                    
                    # Mapping coins na symboly
                    if (crypto_base in crypto_coins or 
                        crypto_base.lower() in [c.lower() for c in crypto_coins]):
                        relevant_articles.append(article)
                
                # V√Ωpoƒçet sentiment pro tuto kryptomƒõnu
                if relevant_articles:
                    crypto_sentiment = sum(
                        a.get('sentiment', {}).get('sentiment', 0) 
                        for a in relevant_articles
                    ) / len(relevant_articles)
                    
                    crypto_confidence = sum(
                        a.get('sentiment', {}).get('confidence', 0) 
                        for a in relevant_articles
                    ) / len(relevant_articles)
                    
                    article_count = len(relevant_articles)
                else:
                    # Pou≈æij celkov√Ω sentiment pokud nen√≠ specifick√Ω
                    crypto_sentiment = overall_sentiment * 0.5  # Oslaben√Ω vliv
                    crypto_confidence = 0.3  # Ni≈æ≈°√≠ confidence
                    article_count = 0
                
                # Generov√°n√≠ sign√°lu (stejn√° logika jako YouTube)
                signal_strength = 0.0
                signal_type = "NEUTRAL"
                
                if (abs(crypto_sentiment) > self.config['sentiment_threshold'] and 
                    crypto_confidence > self.config['confidence_threshold']):
                    
                    if crypto_sentiment > 0:
                        signal_type = "BUY"
                        signal_strength = min(crypto_sentiment * crypto_confidence, 1.0)
                    else:
                        signal_type = "SELL" 
                        signal_strength = min(abs(crypto_sentiment) * crypto_confidence, 1.0)
                
                signals[crypto] = {
                    'signal': signal_type,
                    'strength': signal_strength,
                    'sentiment': crypto_sentiment,
                    'confidence': crypto_confidence,
                    'article_count': article_count,
                    'source': 'crypto_news',
                    'timestamp': datetime.now().isoformat()
                }
            
            self.news_signals = signals
            self.logger.info(f"üìà Vygenerov√°no {len(signals)} News sign√°l≈Ø")
            
            # Notifikace o siln√Ωch sign√°lech
            self.notifier.notify_multiple_signals(signals)
            
            return signals
            
        except Exception as e:
            self.logger.error(f"‚ùå Chyba p≈ôi generov√°n√≠ sign√°l≈Ø: {e}")
            return {}
    
    def get_news_sentiment_for_symbol(self, symbol):
        """Z√≠sk√°n√≠ News sentimentu pro konkr√©tn√≠ symbol (pou≈æ√≠v√° Perun)"""
        if symbol not in self.news_signals:
            return None
        
        signal_data = self.news_signals[symbol]
        
        # Kontrola st√°≈ô√≠ dat (stejnƒõ jako YouTube)
        try:
            signal_time = datetime.fromisoformat(signal_data['timestamp'])
            if datetime.now() - signal_time > timedelta(hours=2):
                self.logger.warning(f"‚ö†Ô∏è Star√Ω News sign√°l pro {symbol}")
                return None
        except:
            pass
        
        return {
            'sentiment': signal_data['sentiment'],
            'confidence': signal_data['confidence'],
            'strength': signal_data['strength'],
            'signal': signal_data['signal'],
            'source': 'crypto_news',
            'article_count': signal_data.get('article_count', 0)
        }
    
    def enhance_trading_signal(self, tv_signal, symbol):
        """Vylep≈°en√≠ TradingView sign√°lu pomoc√≠ News sentimentu"""
        news_sentiment = self.get_news_sentiment_for_symbol(symbol)
        
        if not news_sentiment:
            return tv_signal, 0.0  # ≈Ω√°dn√Ω News vliv
        
        try:
            # Z√°kladn√≠ logika (stejn√° jako YouTube)
            news_influence = min(
                news_sentiment['strength'] * self.config['max_news_influence'],
                self.config['max_news_influence']
            )
            
            # Kombination sign√°l≈Ø
            if news_sentiment['signal'] == 'BUY' and tv_signal > 0:
                enhanced_signal = tv_signal + (tv_signal * news_influence)
                enhanced_signal = min(enhanced_signal, 1.0)
            elif news_sentiment['signal'] == 'SELL' and tv_signal < 0:
                enhanced_signal = tv_signal + (tv_signal * news_influence) 
                enhanced_signal = max(enhanced_signal, -1.0)
            else:
                # Konfliktn√≠ sign√°ly - minim√°ln√≠ vliv
                enhanced_signal = tv_signal + (news_sentiment['sentiment'] * news_influence * 0.3)
                enhanced_signal = max(-1.0, min(1.0, enhanced_signal))
            
            self.logger.info(
                f"üì∞ News enhancement {symbol}: "
                f"TV={tv_signal:.3f} ‚Üí Enhanced={enhanced_signal:.3f} "
                f"(News: {news_sentiment['signal']}, vliv: {news_influence:.3f})"
            )
            
            return enhanced_signal, news_influence
            
        except Exception as e:
            self.logger.error(f"‚ùå Chyba p≈ôi enhancement: {e}")
            return tv_signal, 0.0
    
    def should_run_analysis(self):
        """Kontrola, zda je ƒças na anal√Ωzu"""
        now = datetime.now()
        current_time = now.strftime('%H:%M')
        
        # Kontrola scheduled ƒças≈Ø
        for scheduled_time in self.config['scheduled_times']:
            # Tolerance 5 minut p≈ôed a po
            scheduled_dt = datetime.strptime(scheduled_time, '%H:%M').replace(
                year=now.year, month=now.month, day=now.day
            )
            
            time_diff = abs((now - scheduled_dt).total_seconds())
            
            # Pokud jsme v rozmez√≠ 5 minut od scheduled ƒçasu
            if time_diff <= 300:  # 5 minut = 300 sekund
                # Kontrola, zda u≈æ anal√Ωza probƒõhla dnes v tomto ƒçase
                if self.last_analysis_time:
                    last_analysis_scheduled = self.last_analysis_time.strftime('%H:%M')
                    last_analysis_date = self.last_analysis_time.date()
                    
                    # Pokud u≈æ anal√Ωza dnes v tomto ƒçase probƒõhla, p≈ôeskoƒçit
                    if (last_analysis_date == now.date() and 
                        last_analysis_scheduled == scheduled_time):
                        return False
                
                self.logger.info(f"‚è∞ ƒåas pro News anal√Ωzu: {scheduled_time} (aktu√°ln√≠: {current_time})")
                return True
        
        return False
    
    def next_analysis_time(self):
        """Vr√°t√≠ ƒças dal≈°√≠ anal√Ωzy"""
        now = datetime.now()
        
        for scheduled_time in self.config['scheduled_times']:
            scheduled_dt = datetime.strptime(scheduled_time, '%H:%M').replace(
                year=now.year, month=now.month, day=now.day
            )
            
            if scheduled_dt > now:
                return scheduled_dt
        
        # Pokud u≈æ jsou v≈°echny ƒçasy dnes za n√°mi, vr√°tit prvn√≠ ƒças z√≠tra
        tomorrow = now + timedelta(days=1)
        first_time = self.config['scheduled_times'][0]
        return datetime.strptime(first_time, '%H:%M').replace(
            year=tomorrow.year, month=tomorrow.month, day=tomorrow.day
        )

    def run_analysis_cycle(self):
        """Jeden cyklus News anal√Ωzy (jen pokud je ƒças)"""
        if not self.should_run_analysis():
            return
        
        try:
            # Proveden√≠ anal√Ωzy
            analysis_data = self.perform_news_analysis()
            
            if analysis_data:
                # Generov√°n√≠ sign√°l≈Ø
                self.generate_news_signals(analysis_data)
                
                self.logger.info("‚úÖ News anal√Ωza cyklus dokonƒçen")
            else:
                self.logger.warning("‚ö†Ô∏è News anal√Ωza selhala")
                
        except Exception as e:
            self.logger.error(f"‚ùå Chyba v News cyklu: {e}")
    
    def start(self):
        """Spu≈°tƒõn√≠ News-Perun integrace"""
        self.logger.info("üöÄ Spou≈°t√≠m News-Perun integraci...")
        
        if not self.initialize_analyzers():
            self.logger.error("‚ùå Inicializace selhala")
            self.notifier.notify_error("Inicializace News analyz√©r≈Ø selhala")
            return False
        
        self.running = True
        
        # Info o scheduled ƒçasech
        next_time = self.next_analysis_time()
        self.logger.info(f"‚è∞ Scheduled anal√Ωzy: {', '.join(self.config['scheduled_times'])}")
        self.logger.info(f"‚è∞ Dal≈°√≠ anal√Ωza: {next_time.strftime('%d.%m.%Y %H:%M')}")
        
        self.notifier.notify_system_status("started", f"Monitoring crypto zpr√°v 2x dennƒõ: {', '.join(self.config['scheduled_times'])}")
        
        # Prvn√≠ anal√Ωza pouze pokud je ƒças
        self.run_analysis_cycle()
        
        # Hlavn√≠ smyƒçka
        while self.running:
            try:
                time.sleep(60)  # Kontrola ka≈ædou minutu
                
                # Anal√Ωza podle schedule
                self.run_analysis_cycle()
                
                # Aktualizace info o dal≈°√≠ anal√Ωze
                if datetime.now().minute == 0:  # Ka≈ædou hodinu
                    next_time = self.next_analysis_time()
                    self.logger.info(f"‚è∞ Dal≈°√≠ anal√Ωza: {next_time.strftime('%d.%m.%Y %H:%M')}")
                
            except KeyboardInterrupt:
                self.logger.info("‚èπÔ∏è P≈ôeru≈°en√≠ u≈æivatelem")
                break
            except Exception as e:
                self.logger.error(f"‚ùå Chyba v hlavn√≠ smyƒçce: {e}")
                time.sleep(30)  # Kr√°tk√° pauza p≈ôi chybƒõ
        
        self.stop()
        return True
    
    def stop(self):
        """Zastaven√≠ integrace"""
        self.logger.info("‚èπÔ∏è Zastavuji News-Perun integraci...")
        self.running = False
        
        # Notifikace o zastaven√≠
        self.notifier.notify_system_status("stopped")
        
        # Ulo≈æen√≠ fin√°ln√≠ cache
        if self.translator:
            self.translator.save_cache()

def main():
    """Hlavn√≠ funkce pro standalone spu≈°tƒõn√≠"""
    integration = NewsPerunIntegration()
    
    # Signal handlers
    def signal_handler(sig, frame):
        print("\n‚èπÔ∏è Zastavuji News-Perun integraci...")
        integration.stop()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # Spu≈°tƒõn√≠
    integration.start()

if __name__ == "__main__":
    main()