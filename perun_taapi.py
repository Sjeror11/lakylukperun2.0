#!/usr/bin/env python3
"""
Perun Trading System - Vylep≈°en√° verze s TAAPI.IO
Specializovan√° verze pro obchodov√°n√≠ s kryptomƒõnami 24/7 vyu≈æ√≠vaj√≠c√≠ technick√© indik√°tory z TAAPI.IO.
"""

import os
import sys
import time
import json
import random
import requests
from datetime import datetime, timedelta

# API kl√≠ƒçe
ALPACA_API_KEY = "AKJYB42QYBVD1EKBDQJ8"
ALPACA_API_SECRET = "SczRiShhbzjejIYP8KKcg50XIhJMIyR895vi1hGI"
ALPACA_BASE_URL = "https://api.alpaca.markets/v2"

# TAAPI.IO API kl√≠ƒç
TAAPI_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbHVlIjoiNjgwMmRhOGU4MDZmZjE2NTFlYzE0ZTc2IiwiaWF0IjoxNzQ1MDE3ODYxLCJleHAiOjMzMjQ5NDgxODYxfQ.ChH7JUXFCpsjRhdMoYFV1TYSq3u7sX_O53iQ-Z80a30"
TAAPI_BASE_URL = "https://api.taapi.io"

# Hlaviƒçky pro Alpaca API po≈æadavky
ALPACA_HEADERS = {
    "APCA-API-KEY-ID": ALPACA_API_KEY,
    "APCA-API-SECRET-KEY": ALPACA_API_SECRET,
    "Content-Type": "application/json"
}

# Kryptomƒõny pro obchodov√°n√≠
CRYPTO_SYMBOLS = ["BTCUSD"]  # Zamƒõ≈ôeno pouze na BTC/USD

# Nastaven√≠ rizika
MAX_POSITION_SIZE = 50  # Maxim√°ln√≠ velikost pozice v USD
MAX_TOTAL_POSITIONS = 1  # Maxim√°ln√≠ poƒçet souƒçasn√Ωch pozic
RISK_LIMIT_PERCENT = 0.02  # Maxim√°ln√≠ riziko na obchod (2% portfolia)

# Nastaven√≠ obchodn√≠ strategie
STRATEGY_NAME = "Multi-Indicator Strategy"
STRATEGY_DESCRIPTION = "Strategie vyu≈æ√≠vaj√≠c√≠ kombinaci RSI, MACD, Bollinger Bands a EMA pro generov√°n√≠ obchodn√≠ch sign√°l≈Ø."

# Funkce pro pr√°ci s Alpaca API
def get_account():
    """Z√≠sk√° informace o √∫ƒçtu."""
    try:
        response = requests.get(f"{ALPACA_BASE_URL}/account", headers=ALPACA_HEADERS)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ informac√≠ o √∫ƒçtu: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ informac√≠ o √∫ƒçtu: {e}")
        return None

def get_positions():
    """Z√≠sk√° aktu√°ln√≠ pozice."""
    try:
        response = requests.get(f"{ALPACA_BASE_URL}/positions", headers=ALPACA_HEADERS)
        if response.status_code == 200:
            positions = response.json()
            # Filtrujeme pouze kryptomƒõnov√© pozice
            crypto_positions = [p for p in positions if p.get("symbol") in CRYPTO_SYMBOLS]
            return crypto_positions
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ pozic: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return []
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ pozic: {e}")
        return []

def get_orders():
    """Z√≠sk√° aktu√°ln√≠ objedn√°vky."""
    try:
        response = requests.get(f"{ALPACA_BASE_URL}/orders", headers=ALPACA_HEADERS)
        if response.status_code == 200:
            orders = response.json()
            # Filtrujeme pouze kryptomƒõnov√© objedn√°vky
            crypto_orders = [o for o in orders if o.get("symbol") in CRYPTO_SYMBOLS]
            return crypto_orders
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ objedn√°vek: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return []
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ objedn√°vek: {e}")
        return []

def place_crypto_order(symbol, qty, side, order_type="market", time_in_force="gtc"):
    """Zad√° objedn√°vku na kryptomƒõnu."""
    try:
        data = {
            "symbol": symbol,
            "qty": str(qty),  # Alpaca vy≈æaduje qty jako string pro kryptomƒõny
            "side": side,
            "type": order_type,
            "time_in_force": time_in_force
        }
        response = requests.post(f"{ALPACA_BASE_URL}/orders", headers=ALPACA_HEADERS, json=data)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå Chyba p≈ôi zad√°v√°n√≠ objedn√°vky: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi zad√°v√°n√≠ objedn√°vky: {e}")
        return None

def cancel_order(order_id):
    """Zru≈°√≠ objedn√°vku."""
    try:
        response = requests.delete(f"{ALPACA_BASE_URL}/orders/{order_id}", headers=ALPACA_HEADERS)
        if response.status_code == 204:
            return True
        else:
            print(f"‚ùå Chyba p≈ôi ru≈°en√≠ objedn√°vky: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi ru≈°en√≠ objedn√°vky: {e}")
        return False

# Funkce pro pr√°ci s TAAPI.IO API
def get_rsi(symbol, interval="1h"):
    """Z√≠sk√° hodnotu RSI (Relative Strength Index) pro dan√Ω symbol a interval."""
    try:
        params = {
            "secret": TAAPI_API_KEY,
            "exchange": "binance",
            "symbol": symbol,
            "interval": interval
        }
        response = requests.get(f"{TAAPI_BASE_URL}/rsi", params=params)
        if response.status_code == 200:
            data = response.json()
            return data.get("value")
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ RSI: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ RSI: {e}")
        return None

def get_macd(symbol, interval="1h"):
    """Z√≠sk√° hodnoty MACD (Moving Average Convergence Divergence) pro dan√Ω symbol a interval."""
    try:
        params = {
            "secret": TAAPI_API_KEY,
            "exchange": "binance",
            "symbol": symbol,
            "interval": interval
        }
        response = requests.get(f"{TAAPI_BASE_URL}/macd", params=params)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ MACD: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ MACD: {e}")
        return None

def get_bbands(symbol, interval="1h"):
    """Z√≠sk√° hodnoty Bollinger Bands pro dan√Ω symbol a interval."""
    try:
        params = {
            "secret": TAAPI_API_KEY,
            "exchange": "binance",
            "symbol": symbol,
            "interval": interval
        }
        response = requests.get(f"{TAAPI_BASE_URL}/bbands", params=params)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ Bollinger Bands: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ Bollinger Bands: {e}")
        return None

def get_ema(symbol, interval="1h", period=20):
    """Z√≠sk√° hodnotu EMA (Exponential Moving Average) pro dan√Ω symbol a interval."""
    try:
        params = {
            "secret": TAAPI_API_KEY,
            "exchange": "binance",
            "symbol": symbol,
            "interval": interval,
            "period": period
        }
        response = requests.get(f"{TAAPI_BASE_URL}/ema", params=params)
        if response.status_code == 200:
            data = response.json()
            return data.get("value")
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ EMA: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ EMA: {e}")
        return None

def get_price(symbol):
    """Z√≠sk√° aktu√°ln√≠ cenu pro dan√Ω symbol z Binance p≈ôes TAAPI.IO."""
    try:
        params = {
            "secret": TAAPI_API_KEY,
            "exchange": "binance",
            "symbol": symbol,
            "interval": "1m"  # Nejkrat≈°√≠ interval pro aktu√°ln√≠ cenu
        }
        response = requests.get(f"{TAAPI_BASE_URL}/price", params=params)
        if response.status_code == 200:
            data = response.json()
            return data.get("value")
        else:
            print(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ ceny: {response.status_code}")
            print(f"Odpovƒõƒè: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå V√Ωjimka p≈ôi z√≠sk√°v√°n√≠ ceny: {e}")
        return None

# Funkce pro anal√Ωzu a generov√°n√≠ obchodn√≠ch sign√°l≈Ø
def analyze_crypto(symbol):
    """Analyzuje kryptomƒõnu a generuje obchodn√≠ sign√°l na z√°kladƒõ technick√Ωch indik√°tor≈Ø."""
    print(f"üîç Analyzuji {symbol}...")
    
    # P≈ôevod symbolu na form√°t pro TAAPI.IO (nap≈ô. BTCUSD -> BTC/USDT)
    taapi_symbol = f"{symbol[:3]}/USDT"
    
    # Z√≠sk√°n√≠ hodnot technick√Ωch indik√°tor≈Ø
    rsi = get_rsi(taapi_symbol)
    macd = get_macd(taapi_symbol)
    bbands = get_bbands(taapi_symbol)
    ema20 = get_ema(taapi_symbol, period=20)
    ema50 = get_ema(taapi_symbol, period=50)
    current_price = get_price(taapi_symbol)
    
    # Kontrola, zda se poda≈ôilo z√≠skat v≈°echny indik√°tory
    if not all([rsi, macd, bbands, ema20, ema50, current_price]):
        print(f"‚ùå Nepoda≈ôilo se z√≠skat v≈°echny indik√°tory pro {symbol}")
        return None
    
    # Inicializace sign√°lu a d≈Øvƒõry
    signal = None
    confidence = 0.5
    reasons = []
    
    # Anal√Ωza RSI
    if rsi < 30:  # P≈ôekoupeno
        signal = "buy"
        confidence += 0.1
        reasons.append(f"RSI je n√≠zk√© ({rsi:.2f} < 30) - p≈ôekoupeno")
    elif rsi > 70:  # P≈ôeprod√°no
        signal = "sell"
        confidence += 0.1
        reasons.append(f"RSI je vysok√© ({rsi:.2f} > 70) - p≈ôeprod√°no")
    
    # Anal√Ωza MACD
    if macd["valueMACD"] > macd["valueMACDSignal"]:  # MACD nad sign√°ln√≠ lini√≠ - b√Ωƒç√≠ sign√°l
        if signal == "buy":
            confidence += 0.1
            reasons.append(f"MACD ({macd['valueMACD']:.2f}) je nad sign√°ln√≠ lini√≠ ({macd['valueMACDSignal']:.2f}) - b√Ωƒç√≠ sign√°l")
        elif signal is None:
            signal = "buy"
            confidence += 0.1
            reasons.append(f"MACD ({macd['valueMACD']:.2f}) je nad sign√°ln√≠ lini√≠ ({macd['valueMACDSignal']:.2f}) - b√Ωƒç√≠ sign√°l")
    elif macd["valueMACD"] < macd["valueMACDSignal"]:  # MACD pod sign√°ln√≠ lini√≠ - medvƒõd√≠ sign√°l
        if signal == "sell":
            confidence += 0.1
            reasons.append(f"MACD ({macd['valueMACD']:.2f}) je pod sign√°ln√≠ lini√≠ ({macd['valueMACDSignal']:.2f}) - medvƒõd√≠ sign√°l")
        elif signal is None:
            signal = "sell"
            confidence += 0.1
            reasons.append(f"MACD ({macd['valueMACD']:.2f}) je pod sign√°ln√≠ lini√≠ ({macd['valueMACDSignal']:.2f}) - medvƒõd√≠ sign√°l")
    
    # Anal√Ωza Bollinger Bands
    if current_price < bbands["valueLowerBand"]:  # Cena pod doln√≠ hranic√≠ - potenci√°ln√≠ n√°kup
        if signal == "buy":
            confidence += 0.15
            reasons.append(f"Cena ({current_price:.2f}) je pod doln√≠ hranic√≠ BB ({bbands['valueLowerBand']:.2f}) - potenci√°ln√≠ n√°kup")
        elif signal is None:
            signal = "buy"
            confidence += 0.15
            reasons.append(f"Cena ({current_price:.2f}) je pod doln√≠ hranic√≠ BB ({bbands['valueLowerBand']:.2f}) - potenci√°ln√≠ n√°kup")
    elif current_price > bbands["valueUpperBand"]:  # Cena nad horn√≠ hranic√≠ - potenci√°ln√≠ prodej
        if signal == "sell":
            confidence += 0.15
            reasons.append(f"Cena ({current_price:.2f}) je nad horn√≠ hranic√≠ BB ({bbands['valueUpperBand']:.2f}) - potenci√°ln√≠ prodej")
        elif signal is None:
            signal = "sell"
            confidence += 0.15
            reasons.append(f"Cena ({current_price:.2f}) je nad horn√≠ hranic√≠ BB ({bbands['valueUpperBand']:.2f}) - potenci√°ln√≠ prodej")
    
    # Anal√Ωza EMA k≈ô√≠≈æen√≠
    if ema20 > ema50:  # EMA20 nad EMA50 - b√Ωƒç√≠ trend
        if signal == "buy":
            confidence += 0.1
            reasons.append(f"EMA20 ({ema20:.2f}) je nad EMA50 ({ema50:.2f}) - b√Ωƒç√≠ trend")
        elif signal is None:
            signal = "buy"
            confidence += 0.05
            reasons.append(f"EMA20 ({ema20:.2f}) je nad EMA50 ({ema50:.2f}) - b√Ωƒç√≠ trend")
    elif ema20 < ema50:  # EMA20 pod EMA50 - medvƒõd√≠ trend
        if signal == "sell":
            confidence += 0.1
            reasons.append(f"EMA20 ({ema20:.2f}) je pod EMA50 ({ema50:.2f}) - medvƒõd√≠ trend")
        elif signal is None:
            signal = "sell"
            confidence += 0.05
            reasons.append(f"EMA20 ({ema20:.2f}) je pod EMA50 ({ema50:.2f}) - medvƒõd√≠ trend")
    
    # Pokud nem√°me sign√°l, vr√°t√≠me None
    if signal is None:
        print(f"‚ùå ≈Ω√°dn√Ω obchodn√≠ sign√°l pro {symbol}")
        return None
    
    # V√Ωpoƒçet mno≈æstv√≠ na z√°kladƒõ rizika
    account = get_account()
    if not account:
        return None
    
    portfolio_value = float(account.get("portfolio_value", 0))
    risk_amount = portfolio_value * RISK_LIMIT_PERCENT
    
    # Omezen√≠ velikosti pozice
    max_qty_by_risk = risk_amount / current_price
    max_qty_by_limit = MAX_POSITION_SIZE / current_price
    qty = min(max_qty_by_risk, max_qty_by_limit)
    
    # Zaokrouhlen√≠ na 8 desetinn√Ωch m√≠st (bƒõ≈æn√© pro kryptomƒõny)
    qty = round(qty, 8)
    
    # Minim√°ln√≠ mno≈æstv√≠ pro obchodov√°n√≠
    if qty < 0.0001:
        qty = 0.0001
    
    return {
        "symbol": symbol,
        "side": signal,
        "qty": qty,
        "price": current_price,
        "confidence": confidence,
        "reasons": reasons,
        "indicators": {
            "rsi": rsi,
            "macd": macd,
            "bbands": bbands,
            "ema20": ema20,
            "ema50": ema50
        }
    }

def format_money(amount):
    """Form√°tuje ƒç√°stku jako pen√≠ze."""
    return f"${amount:.2f}"

def format_crypto(amount):
    """Form√°tuje mno≈æstv√≠ kryptomƒõny."""
    if amount < 0.001:
        return f"{amount:.8f}"
    elif amount < 1:
        return f"{amount:.6f}"
    else:
        return f"{amount:.4f}"

def log_to_file(message, log_file="trading_log.txt"):
    """Zap√≠≈°e zpr√°vu do logovac√≠ho souboru."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(log_file, "a") as f:
        f.write(f"[{timestamp}] {message}\n")

def run_crypto_trading_system():
    """Spou≈°t√≠ obchodn√≠ syst√©m pro kryptomƒõny."""
    print("=" * 50)
    print("PERUN TRADING SYSTEM - TAAPI.IO VERZE")
    print("=" * 50)
    print("Spou≈°t√≠m obchodn√≠ syst√©m pro kryptomƒõny 24/7 s vyu≈æit√≠m TAAPI.IO.")
    print(f"Obchodovan√© symboly: {', '.join(CRYPTO_SYMBOLS)}")
    print(f"Strategie: {STRATEGY_NAME}")
    print(f"Popis: {STRATEGY_DESCRIPTION}")
    print("=" * 50)
    
    # Vytvo≈ôen√≠ logovac√≠ho souboru
    log_file = "trading_log.txt"
    log_to_file("=== SPU≈†TƒöN√ç OBCHODN√çHO SYST√âMU ===", log_file)
    
    # Z√≠sk√°n√≠ informac√≠ o √∫ƒçtu
    account = get_account()
    if not account:
        print("‚ùå Nelze z√≠skat informace o √∫ƒçtu. Ukonƒçuji.")
        return
    
    print(f"\nüìä Informace o √∫ƒçtu:")
    print(f"ID √∫ƒçtu: {account.get('id')}")
    print(f"Status √∫ƒçtu: {account.get('status')}")
    print(f"Hotovost: {format_money(float(account.get('cash', 0)))}")
    print(f"Hodnota portfolia: {format_money(float(account.get('portfolio_value', 0)))}")
    
    log_to_file(f"Poƒç√°teƒçn√≠ hodnota portfolia: {format_money(float(account.get('portfolio_value', 0)))}", log_file)
    
    # Hlavn√≠ smyƒçka
    try:
        cycle = 0
        while True:
            cycle += 1
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            print(f"\n{'=' * 20} CYKLUS {cycle} ({now}) {'=' * 20}")
            log_to_file(f"CYKLUS {cycle} ({now})", log_file)
            
            # Z√≠sk√°n√≠ aktu√°ln√≠ch pozic
            positions = get_positions()
            print(f"\nüìà Aktu√°ln√≠ krypto pozice ({len(positions)}):")
            for position in positions:
                symbol = position.get("symbol")
                qty = float(position.get("qty", 0))
                avg_entry_price = float(position.get("avg_entry_price", 0))
                current_price = float(position.get("current_price", 0))
                market_value = float(position.get("market_value", 0))
                unrealized_pl = float(position.get("unrealized_pl", 0))
                unrealized_plpc = float(position.get("unrealized_plpc", 0)) * 100
                
                position_info = f"{symbol}: {format_crypto(qty)} @ {format_money(avg_entry_price)} | Aktu√°ln√≠ cena: {format_money(current_price)} | P/L: {format_money(unrealized_pl)} ({unrealized_plpc:.2f}%)"
                print(f"  {position_info}")
                log_to_file(f"Pozice: {position_info}", log_file)
            
            # Z√≠sk√°n√≠ aktu√°ln√≠ch objedn√°vek
            orders = get_orders()
            print(f"\nüìã Aktu√°ln√≠ krypto objedn√°vky ({len(orders)}):")
            for order in orders:
                order_id = order.get("id")
                symbol = order.get("symbol")
                side = order.get("side")
                qty = float(order.get("qty", 0))
                order_type = order.get("type")
                status = order.get("status")
                
                order_info = f"{symbol}: {side.upper()} {format_crypto(qty)} ({order_type}) | Status: {status}"
                print(f"  {order_info}")
                log_to_file(f"Objedn√°vka: {order_info}", log_file)
            
            # Anal√Ωza a generov√°n√≠ obchodn√≠ch sign√°l≈Ø
            for symbol in CRYPTO_SYMBOLS:
                signal = analyze_crypto(symbol)
                if signal:
                    side = signal.get("side")
                    qty = signal.get("qty")
                    price = signal.get("price")
                    confidence = signal.get("confidence")
                    reasons = signal.get("reasons", [])
                    indicators = signal.get("indicators", {})
                    
                    print(f"\nüîî Obchodn√≠ sign√°l pro {symbol}:")
                    print(f"  Akce: {side.upper()}")
                    print(f"  Mno≈æstv√≠: {format_crypto(qty)}")
                    print(f"  Cena: {format_money(price)}")
                    print(f"  D≈Øvƒõra: {confidence:.2f}")
                    print(f"  D≈Øvody:")
                    for reason in reasons:
                        print(f"    - {reason}")
                    
                    print(f"  Indik√°tory:")
                    print(f"    - RSI: {indicators['rsi']:.2f}")
                    print(f"    - MACD: {indicators['macd']['valueMACD']:.2f} (Signal: {indicators['macd']['valueMACDSignal']:.2f}, Hist: {indicators['macd']['valueMACDHist']:.2f})")
                    print(f"    - Bollinger Bands: Upper: {indicators['bbands']['valueUpperBand']:.2f}, Middle: {indicators['bbands']['valueMiddleBand']:.2f}, Lower: {indicators['bbands']['valueLowerBand']:.2f}")
                    print(f"    - EMA20: {indicators['ema20']:.2f}")
                    print(f"    - EMA50: {indicators['ema50']:.2f}")
                    
                    signal_info = f"{symbol}: {side.upper()} {format_crypto(qty)} @ {format_money(price)} | D≈Øvƒõra: {confidence:.2f}"
                    log_to_file(f"Sign√°l: {signal_info}", log_file)
                    for reason in reasons:
                        log_to_file(f"  - {reason}", log_file)
                    
                    # Proveden√≠ obchodu na z√°kladƒõ sign√°lu
                    if confidence > 0.7:  # Pouze sign√°ly s vysokou d≈Øvƒõrou
                        # Kontrola, zda ji≈æ nem√°me otev≈ôenou pozici
                        existing_position = next((p for p in positions if p.get("symbol") == symbol), None)
                        
                        # Pokud m√°me pozici a sign√°l je stejn√Ω smƒõr, p≈ôeskoƒç√≠me
                        if existing_position:
                            position_side = "sell" if float(existing_position.get("qty", 0)) < 0 else "buy"
                            if position_side == side:
                                skip_message = f"Ji≈æ m√°me otev≈ôenou pozici {position_side.upper()} pro {symbol}, p≈ôeskakuji"
                                print(f"  ‚ö†Ô∏è {skip_message}")
                                log_to_file(f"P≈ôeskoƒçeno: {skip_message}", log_file)
                                continue
                        
                        trade_message = f"Prov√°d√≠m obchod: {side.upper()} {format_crypto(qty)} {symbol} @ {format_money(price)}"
                        print(f"  ‚úÖ {trade_message}")
                        log_to_file(f"Obchod: {trade_message}", log_file)
                        
                        result = place_crypto_order(symbol, qty, side)
                        if result:
                            success_message = f"Obchod zad√°n: ID objedn√°vky {result.get('id')}"
                            print(f"  ‚úÖ {success_message}")
                            log_to_file(f"√öspƒõch: {success_message}", log_file)
                        else:
                            error_message = f"Obchod se nezda≈ôil"
                            print(f"  ‚ùå {error_message}")
                            log_to_file(f"Chyba: {error_message}", log_file)
                    else:
                        low_confidence_message = f"D≈Øvƒõra sign√°lu je p≈ô√≠li≈° n√≠zk√° ({confidence:.2f}), neprov√°d√≠m obchod"
                        print(f"  ‚ö†Ô∏è {low_confidence_message}")
                        log_to_file(f"N√≠zk√° d≈Øvƒõra: {low_confidence_message}", log_file)
                else:
                    no_signal_message = f"{symbol}: ≈Ω√°dn√Ω obchodn√≠ sign√°l"
                    print(f"  {no_signal_message}")
                    log_to_file(no_signal_message, log_file)
            
            # ƒåek√°n√≠ na dal≈°√≠ cyklus
            wait_time = 300  # 5 minut mezi cykly
            print(f"\n‚è±Ô∏è ƒåek√°m {wait_time} sekund na dal≈°√≠ cyklus...")
            log_to_file(f"ƒåek√°n√≠ {wait_time} sekund na dal≈°√≠ cyklus", log_file)
            time.sleep(wait_time)
    
    except KeyboardInterrupt:
        print("\n\nüõë Obchodn√≠ syst√©m ukonƒçen u≈æivatelem")
        log_to_file("=== UKONƒåEN√ç OBCHODN√çHO SYST√âMU U≈ΩIVATELEM ===", log_file)
        
        # Z√≠sk√°n√≠ aktu√°ln√≠ch informac√≠ o √∫ƒçtu
        final_account = get_account()
        if final_account:
            final_value = float(final_account.get("portfolio_value", 0))
            initial_value = float(account.get("portfolio_value", 0))
            profit = final_value - initial_value
            profit_percent = (profit / initial_value) * 100 if initial_value > 0 else 0
            
            print(f"üí∞ Koneƒçn√° hodnota portfolia: {format_money(final_value)}")
            print(f"üìä Zisk/Ztr√°ta: {format_money(profit)} ({profit_percent:.2f}%)")
            
            log_to_file(f"Koneƒçn√° hodnota portfolia: {format_money(final_value)}", log_file)
            log_to_file(f"Zisk/Ztr√°ta: {format_money(profit)} ({profit_percent:.2f}%)", log_file)
        
        sys.exit(0)

if __name__ == "__main__":
    run_crypto_trading_system()
